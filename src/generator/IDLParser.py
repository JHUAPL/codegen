# Generated from IDL.g4 by ANTLR 4.9.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3q")
        buf.write("\u04a0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\3\2\7\2\u0106\n\2\f\2")
        buf.write("\16\2\u0109\13\2\3\2\6\2\u010c\n\2\r\2\16\2\u010d\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\5\3\u012f\n\3\3\4\3\4\3\4\3\4\6\4\u0135\n")
        buf.write("\4\r\4\16\4\u0136\3\4\3\4\3\5\3\5\5\5\u013d\n\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\7\5\7\u0145\n\7\3\7\3\7\3\7\3\b\5\b\u014b")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u0150\n\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\5\t\u0158\n\t\3\n\7\n\u015b\n\n\f\n\16\n\u015e\13\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u0181\n\13\3\f\3\f\3\f\3\f\7\f\u0187\n\f\f\f\16")
        buf.write("\f\u018a\13\f\3\r\3\r\3\16\5\16\u018f\n\16\3\16\3\16\3")
        buf.write("\16\7\16\u0194\n\16\f\16\16\16\u0197\13\16\3\17\3\17\3")
        buf.write("\17\3\17\5\17\u019d\n\17\3\20\5\20\u01a0\n\20\3\20\3\20")
        buf.write("\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\7\22\u01af\n\22\f\22\16\22\u01b2\13\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\7\23\u01b9\n\23\f\23\16\23\u01bc\13\23\3\23")
        buf.write("\3\23\3\24\5\24\u01c1\n\24\3\24\3\24\3\24\3\24\3\25\3")
        buf.write("\25\5\25\u01c9\n\25\3\25\3\25\3\25\7\25\u01ce\n\25\f\25")
        buf.write("\16\25\u01d1\13\25\5\25\u01d3\n\25\3\25\3\25\3\25\3\25")
        buf.write("\7\25\u01d9\n\25\f\25\16\25\u01dc\13\25\5\25\u01de\n\25")
        buf.write("\3\26\3\26\3\27\3\27\3\27\5\27\u01e5\n\27\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\31\3\31\3\31\3\31\5\31\u01f0\n\31\3\31")
        buf.write("\3\31\5\31\u01f4\n\31\3\31\3\31\3\32\3\32\3\32\7\32\u01fb")
        buf.write("\n\32\f\32\16\32\u01fe\13\32\3\33\3\33\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u0211\n\36\3\37\3\37\5\37\u0215\n\37\3 \3 ")
        buf.write("\3 \7 \u021a\n \f \16 \u021d\13 \3!\3!\3!\7!\u0222\n!")
        buf.write("\f!\16!\u0225\13!\3\"\3\"\3\"\7\"\u022a\n\"\f\"\16\"\u022d")
        buf.write("\13\"\3#\3#\3#\7#\u0232\n#\f#\16#\u0235\13#\3$\3$\3$\7")
        buf.write("$\u023a\n$\f$\16$\u023d\13$\3%\3%\3%\7%\u0242\n%\f%\16")
        buf.write("%\u0245\13%\3&\3&\3&\3&\5&\u024b\n&\3\'\3\'\3(\3(\3(\3")
        buf.write("(\3(\3(\5(\u0255\n(\3)\3)\3*\3*\3+\3+\3+\3+\3,\3,\5,\u0261")
        buf.write("\n,\3-\3-\3-\5-\u0266\n-\3.\3.\3.\3.\3.\3.\5.\u026e\n")
        buf.write(".\3/\3/\3/\3/\5/\u0274\n/\3\60\3\60\3\60\5\60\u0279\n")
        buf.write("\60\3\61\3\61\3\61\7\61\u027e\n\61\f\61\16\61\u0281\13")
        buf.write("\61\3\62\3\62\5\62\u0285\n\62\3\63\3\63\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u028d\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\5\65\u02a2\n\65\3\66\3\66\3\67\3\67\38\38\3")
        buf.write("9\39\3:\3:\3;\3;\3<\3<\3<\3<\5<\u02b4\n<\3<\3<\3<\3<\3")
        buf.write("=\6=\u02bb\n=\r=\16=\u02bc\3>\3>\3>\3>\3>\3>\3>\3>\3>")
        buf.write("\3>\3>\3>\3>\3>\3>\5>\u02ce\n>\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3@\3@\3@\3@\3@\5@\u02df\n@\3A\6A\u02e2\nA\rA\16")
        buf.write("A\u02e3\3B\6B\u02e7\nB\rB\16B\u02e8\3B\3B\3B\3C\3C\3C")
        buf.write("\3C\3C\3C\5C\u02f4\nC\3D\3D\3D\3E\3E\3E\3E\3E\3E\3F\3")
        buf.write("F\3F\7F\u0302\nF\fF\16F\u0305\13F\3G\3G\3G\3G\3G\5G\u030c")
        buf.write("\nG\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u031a\nH\3")
        buf.write("I\3I\3I\3I\3I\3I\5I\u0322\nI\3J\3J\3J\3J\3J\3J\5J\u032a")
        buf.write("\nJ\3K\3K\6K\u032e\nK\rK\16K\u032f\3L\3L\3L\3L\3M\3M\5")
        buf.write("M\u0338\nM\3N\3N\3N\3N\7N\u033e\nN\fN\16N\u0341\13N\3")
        buf.write("N\3N\3O\5O\u0346\nO\3O\3O\3O\3O\5O\u034c\nO\3O\5O\u034f")
        buf.write("\nO\3P\3P\3Q\3Q\5Q\u0355\nQ\3R\3R\3R\3R\7R\u035b\nR\f")
        buf.write("R\16R\u035e\13R\3R\3R\3R\3R\5R\u0364\nR\3S\3S\3S\3S\3")
        buf.write("T\3T\3U\3U\3U\3U\3U\7U\u0371\nU\fU\16U\u0374\13U\3U\3")
        buf.write("U\3V\3V\3V\3V\3V\7V\u037d\nV\fV\16V\u0380\13V\3V\3V\3")
        buf.write("W\3W\3W\3W\5W\u0388\nW\3X\3X\3X\3X\3X\3X\3X\3Y\3Y\3Z\3")
        buf.write("Z\3[\3[\3[\3[\5[\u0399\n[\3\\\3\\\3\\\3\\\3]\3]\5]\u03a1")
        buf.write("\n]\3^\3^\3^\3^\3_\3_\3_\3_\3`\3`\3`\3`\3`\3a\3a\3a\3")
        buf.write("a\3a\3a\7a\u03b6\na\fa\16a\u03b9\13a\5a\u03bb\na\3b\3")
        buf.write("b\3b\3b\3c\3c\3c\3c\3c\3c\7c\u03c7\nc\fc\16c\u03ca\13")
        buf.write("c\5c\u03cc\nc\3d\3d\5d\u03d0\nd\3d\5d\u03d3\nd\3e\3e\3")
        buf.write("e\3f\3f\3f\3g\3g\3g\3g\7g\u03df\ng\fg\16g\u03e2\13g\3")
        buf.write("g\3g\3h\3h\5h\u03e8\nh\3i\3i\3i\3j\3j\3j\3j\3j\3k\3k\3")
        buf.write("k\5k\u03f5\nk\3k\5k\u03f8\nk\3l\3l\3l\3l\7l\u03fe\nl\f")
        buf.write("l\16l\u0401\13l\3m\3m\3m\3n\7n\u0407\nn\fn\16n\u040a\13")
        buf.write("n\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\5o\u041e\no\3p\3p\3p\3p\3q\3q\5q\u0426\nq\3r\3r\5r\u042a")
        buf.write("\nr\3r\3r\3r\3s\3s\3s\3s\3t\3t\3t\3t\3u\3u\3u\3u\3v\3")
        buf.write("v\3v\3w\3w\3w\5w\u0441\nw\3w\5w\u0444\nw\3w\3w\3w\5w\u0449")
        buf.write("\nw\3x\3x\3x\3y\3y\3y\3z\3z\7z\u0453\nz\fz\16z\u0456\13")
        buf.write("z\3z\3z\3{\3{\3{\3{\3{\3{\3{\5{\u0461\n{\3|\3|\3|\3|\5")
        buf.write("|\u0467\n|\3|\3|\5|\u046b\n|\3}\3}\3}\3}\5}\u0471\n}\3")
        buf.write("}\3}\5}\u0475\n}\3~\3~\3~\5~\u047a\n~\3\177\5\177\u047d")
        buf.write("\n\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\7\u0080\u0488\n\u0080\f\u0080\16\u0080")
        buf.write("\u048b\13\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\7\u0081\u0492\n\u0081\f\u0081\16\u0081\u0495\13\u0081")
        buf.write("\3\u0081\3\u0081\3\u0082\5\u0082\u049a\n\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\2\2\u0083\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\2\n\4")
        buf.write("\2aaii\4\299>>\3\2$%\3\2\33\34\5\2\27\27\32\32!!\4\2\26")
        buf.write("\26\33\34\4\2\3\3\5\f\5\2\'\'<<bb\2\u04be\2\u0107\3\2")
        buf.write("\2\2\4\u012e\3\2\2\2\6\u0130\3\2\2\2\b\u013c\3\2\2\2\n")
        buf.write("\u013e\3\2\2\2\f\u0144\3\2\2\2\16\u014a\3\2\2\2\20\u0157")
        buf.write("\3\2\2\2\22\u015c\3\2\2\2\24\u0180\3\2\2\2\26\u0182\3")
        buf.write("\2\2\2\30\u018b\3\2\2\2\32\u018e\3\2\2\2\34\u019c\3\2")
        buf.write("\2\2\36\u019f\3\2\2\2 \u01a4\3\2\2\2\"\u01a8\3\2\2\2$")
        buf.write("\u01b5\3\2\2\2&\u01c0\3\2\2\2(\u01d2\3\2\2\2*\u01df\3")
        buf.write("\2\2\2,\u01e4\3\2\2\2.\u01e6\3\2\2\2\60\u01eb\3\2\2\2")
        buf.write("\62\u01f7\3\2\2\2\64\u01ff\3\2\2\2\66\u0203\3\2\2\28\u0205")
        buf.write("\3\2\2\2:\u0210\3\2\2\2<\u0214\3\2\2\2>\u0216\3\2\2\2")
        buf.write("@\u021e\3\2\2\2B\u0226\3\2\2\2D\u022e\3\2\2\2F\u0236\3")
        buf.write("\2\2\2H\u023e\3\2\2\2J\u024a\3\2\2\2L\u024c\3\2\2\2N\u0254")
        buf.write("\3\2\2\2P\u0256\3\2\2\2R\u0258\3\2\2\2T\u025a\3\2\2\2")
        buf.write("V\u0260\3\2\2\2X\u0265\3\2\2\2Z\u026d\3\2\2\2\\\u0273")
        buf.write("\3\2\2\2^\u0278\3\2\2\2`\u027a\3\2\2\2b\u0284\3\2\2\2")
        buf.write("d\u0286\3\2\2\2f\u028c\3\2\2\2h\u02a1\3\2\2\2j\u02a3\3")
        buf.write("\2\2\2l\u02a5\3\2\2\2n\u02a7\3\2\2\2p\u02a9\3\2\2\2r\u02ab")
        buf.write("\3\2\2\2t\u02ad\3\2\2\2v\u02af\3\2\2\2x\u02ba\3\2\2\2")
        buf.write("z\u02cd\3\2\2\2|\u02cf\3\2\2\2~\u02de\3\2\2\2\u0080\u02e1")
        buf.write("\3\2\2\2\u0082\u02e6\3\2\2\2\u0084\u02f3\3\2\2\2\u0086")
        buf.write("\u02f5\3\2\2\2\u0088\u02f8\3\2\2\2\u008a\u02fe\3\2\2\2")
        buf.write("\u008c\u030b\3\2\2\2\u008e\u0319\3\2\2\2\u0090\u0321\3")
        buf.write("\2\2\2\u0092\u0329\3\2\2\2\u0094\u032b\3\2\2\2\u0096\u0331")
        buf.write("\3\2\2\2\u0098\u0337\3\2\2\2\u009a\u0339\3\2\2\2\u009c")
        buf.write("\u0345\3\2\2\2\u009e\u0350\3\2\2\2\u00a0\u0354\3\2\2\2")
        buf.write("\u00a2\u0363\3\2\2\2\u00a4\u0365\3\2\2\2\u00a6\u0369\3")
        buf.write("\2\2\2\u00a8\u036b\3\2\2\2\u00aa\u0377\3\2\2\2\u00ac\u0387")
        buf.write("\3\2\2\2\u00ae\u0389\3\2\2\2\u00b0\u0390\3\2\2\2\u00b2")
        buf.write("\u0392\3\2\2\2\u00b4\u0398\3\2\2\2\u00b6\u039a\3\2\2\2")
        buf.write("\u00b8\u03a0\3\2\2\2\u00ba\u03a2\3\2\2\2\u00bc\u03a6\3")
        buf.write("\2\2\2\u00be\u03aa\3\2\2\2\u00c0\u03ba\3\2\2\2\u00c2\u03bc")
        buf.write("\3\2\2\2\u00c4\u03cb\3\2\2\2\u00c6\u03d2\3\2\2\2\u00c8")
        buf.write("\u03d4\3\2\2\2\u00ca\u03d7\3\2\2\2\u00cc\u03da\3\2\2\2")
        buf.write("\u00ce\u03e7\3\2\2\2\u00d0\u03e9\3\2\2\2\u00d2\u03ec\3")
        buf.write("\2\2\2\u00d4\u03f1\3\2\2\2\u00d6\u03f9\3\2\2\2\u00d8\u0402")
        buf.write("\3\2\2\2\u00da\u0408\3\2\2\2\u00dc\u041d\3\2\2\2\u00de")
        buf.write("\u041f\3\2\2\2\u00e0\u0425\3\2\2\2\u00e2\u0427\3\2\2\2")
        buf.write("\u00e4\u042e\3\2\2\2\u00e6\u0432\3\2\2\2\u00e8\u0436\3")
        buf.write("\2\2\2\u00ea\u043a\3\2\2\2\u00ec\u043d\3\2\2\2\u00ee\u044a")
        buf.write("\3\2\2\2\u00f0\u044d\3\2\2\2\u00f2\u0450\3\2\2\2\u00f4")
        buf.write("\u0460\3\2\2\2\u00f6\u0462\3\2\2\2\u00f8\u046c\3\2\2\2")
        buf.write("\u00fa\u0479\3\2\2\2\u00fc\u047c\3\2\2\2\u00fe\u0481\3")
        buf.write("\2\2\2\u0100\u048e\3\2\2\2\u0102\u0499\3\2\2\2\u0104\u0106")
        buf.write("\5\u00b6\\\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2\2\u0107")
        buf.write("\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010b\3\2\2\2")
        buf.write("\u0109\u0107\3\2\2\2\u010a\u010c\5\4\3\2\u010b\u010a\3")
        buf.write("\2\2\2\u010c\u010d\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e")
        buf.write("\3\2\2\2\u010e\3\3\2\2\2\u010f\u0110\5T+\2\u0110\u0111")
        buf.write("\7\r\2\2\u0111\u012f\3\2\2\2\u0112\u0113\5v<\2\u0113\u0114")
        buf.write("\7\r\2\2\u0114\u012f\3\2\2\2\u0115\u0116\5|?\2\u0116\u0117")
        buf.write("\7\r\2\2\u0117\u012f\3\2\2\2\u0118\u0119\5\u0088E\2\u0119")
        buf.write("\u011a\7\r\2\2\u011a\u012f\3\2\2\2\u011b\u011c\5\u00b4")
        buf.write("[\2\u011c\u011d\7\r\2\2\u011d\u012f\3\2\2\2\u011e\u011f")
        buf.write("\58\35\2\u011f\u0120\7\r\2\2\u0120\u012f\3\2\2\2\u0121")
        buf.write("\u0122\5\6\4\2\u0122\u0123\7\r\2\2\u0123\u012f\3\2\2\2")
        buf.write("\u0124\u0125\5\34\17\2\u0125\u0126\7\r\2\2\u0126\u012f")
        buf.write("\3\2\2\2\u0127\u0128\5\u00ba^\2\u0128\u0129\7\r\2\2\u0129")
        buf.write("\u012f\3\2\2\2\u012a\u012b\5\u00bc_\2\u012b\u012c\7\r")
        buf.write("\2\2\u012c\u012f\3\2\2\2\u012d\u012f\5\20\t\2\u012e\u010f")
        buf.write("\3\2\2\2\u012e\u0112\3\2\2\2\u012e\u0115\3\2\2\2\u012e")
        buf.write("\u0118\3\2\2\2\u012e\u011b\3\2\2\2\u012e\u011e\3\2\2\2")
        buf.write("\u012e\u0121\3\2\2\2\u012e\u0124\3\2\2\2\u012e\u0127\3")
        buf.write("\2\2\2\u012e\u012a\3\2\2\2\u012e\u012d\3\2\2\2\u012f\5")
        buf.write("\3\2\2\2\u0130\u0131\7L\2\2\u0131\u0132\5d\63\2\u0132")
        buf.write("\u0134\7\20\2\2\u0133\u0135\5\4\3\2\u0134\u0133\3\2\2")
        buf.write("\2\u0135\u0136\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137")
        buf.write("\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\7\21\2\2\u0139")
        buf.write("\7\3\2\2\2\u013a\u013d\5\n\6\2\u013b\u013d\5\f\7\2\u013c")
        buf.write("\u013a\3\2\2\2\u013c\u013b\3\2\2\2\u013d\t\3\2\2\2\u013e")
        buf.write("\u013f\5\16\b\2\u013f\u0140\7\20\2\2\u0140\u0141\5\22")
        buf.write("\n\2\u0141\u0142\7\21\2\2\u0142\13\3\2\2\2\u0143\u0145")
        buf.write("\t\2\2\2\u0144\u0143\3\2\2\2\u0144\u0145\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146\u0147\7k\2\2\u0147\u0148\5d\63\2")
        buf.write("\u0148\r\3\2\2\2\u0149\u014b\t\2\2\2\u014a\u0149\3\2\2")
        buf.write("\2\u014a\u014b\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d")
        buf.write("\7k\2\2\u014d\u014f\5d\63\2\u014e\u0150\5\26\f\2\u014f")
        buf.write("\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150\17\3\2\2\2\u0151")
        buf.write("\u0152\7\"\2\2\u0152\u0158\5d\63\2\u0153\u0154\7\"\2\2")
        buf.write("\u0154\u0155\5d\63\2\u0155\u0156\5d\63\2\u0156\u0158\3")
        buf.write("\2\2\2\u0157\u0151\3\2\2\2\u0157\u0153\3\2\2\2\u0158\21")
        buf.write("\3\2\2\2\u0159\u015b\5\24\13\2\u015a\u0159\3\2\2\2\u015b")
        buf.write("\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2")
        buf.write("\u015d\23\3\2\2\2\u015e\u015c\3\2\2\2\u015f\u0160\5T+")
        buf.write("\2\u0160\u0161\7\r\2\2\u0161\u0181\3\2\2\2\u0162\u0163")
        buf.write("\5v<\2\u0163\u0164\7\r\2\2\u0164\u0181\3\2\2\2\u0165\u0166")
        buf.write("\5|?\2\u0166\u0167\7\r\2\2\u0167\u0181\3\2\2\2\u0168\u0169")
        buf.write("\5\u0088E\2\u0169\u016a\7\r\2\2\u016a\u0181\3\2\2\2\u016b")
        buf.write("\u016c\5\u00b4[\2\u016c\u016d\7\r\2\2\u016d\u0181\3\2")
        buf.write("\2\2\u016e\u016f\58\35\2\u016f\u0170\7\r\2\2\u0170\u0181")
        buf.write("\3\2\2\2\u0171\u0172\5\u009aN\2\u0172\u0173\7\r\2\2\u0173")
        buf.write("\u0181\3\2\2\2\u0174\u0175\5\u0098M\2\u0175\u0176\7\r")
        buf.write("\2\2\u0176\u0181\3\2\2\2\u0177\u0178\5\u009cO\2\u0178")
        buf.write("\u0179\7\r\2\2\u0179\u0181\3\2\2\2\u017a\u017b\5\u00ba")
        buf.write("^\2\u017b\u017c\7\r\2\2\u017c\u0181\3\2\2\2\u017d\u017e")
        buf.write("\5\u00bc_\2\u017e\u017f\7\r\2\2\u017f\u0181\3\2\2\2\u0180")
        buf.write("\u015f\3\2\2\2\u0180\u0162\3\2\2\2\u0180\u0165\3\2\2\2")
        buf.write("\u0180\u0168\3\2\2\2\u0180\u016b\3\2\2\2\u0180\u016e\3")
        buf.write("\2\2\2\u0180\u0171\3\2\2\2\u0180\u0174\3\2\2\2\u0180\u0177")
        buf.write("\3\2\2\2\u0180\u017a\3\2\2\2\u0180\u017d\3\2\2\2\u0181")
        buf.write("\25\3\2\2\2\u0182\u0183\7\16\2\2\u0183\u0188\5\30\r\2")
        buf.write("\u0184\u0185\7\17\2\2\u0185\u0187\5\30\r\2\u0186\u0184")
        buf.write("\3\2\2\2\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188")
        buf.write("\u0189\3\2\2\2\u0189\27\3\2\2\2\u018a\u0188\3\2\2\2\u018b")
        buf.write("\u018c\5\32\16\2\u018c\31\3\2\2\2\u018d\u018f\7#\2\2\u018e")
        buf.write("\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190\3\2\2\2")
        buf.write("\u0190\u0195\5d\63\2\u0191\u0192\7#\2\2\u0192\u0194\5")
        buf.write("d\63\2\u0193\u0191\3\2\2\2\u0194\u0197\3\2\2\2\u0195\u0193")
        buf.write("\3\2\2\2\u0195\u0196\3\2\2\2\u0196\33\3\2\2\2\u0197\u0195")
        buf.write("\3\2\2\2\u0198\u019d\5$\23\2\u0199\u019d\5\"\22\2\u019a")
        buf.write("\u019d\5 \21\2\u019b\u019d\5\36\20\2\u019c\u0198\3\2\2")
        buf.write("\2\u019c\u0199\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019b")
        buf.write("\3\2\2\2\u019d\35\3\2\2\2\u019e\u01a0\7a\2\2\u019f\u019e")
        buf.write("\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1")
        buf.write("\u01a2\7J\2\2\u01a2\u01a3\5d\63\2\u01a3\37\3\2\2\2\u01a4")
        buf.write("\u01a5\7J\2\2\u01a5\u01a6\5d\63\2\u01a6\u01a7\5V,\2\u01a7")
        buf.write("!\3\2\2\2\u01a8\u01a9\7a\2\2\u01a9\u01aa\7J\2\2\u01aa")
        buf.write("\u01ab\5d\63\2\u01ab\u01ac\5(\25\2\u01ac\u01b0\7\20\2")
        buf.write("\2\u01ad\u01af\5\24\13\2\u01ae\u01ad\3\2\2\2\u01af\u01b2")
        buf.write("\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1")
        buf.write("\u01b3\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b3\u01b4\7\21\2")
        buf.write("\2\u01b4#\3\2\2\2\u01b5\u01b6\5&\24\2\u01b6\u01ba\7\20")
        buf.write("\2\2\u01b7\u01b9\5,\27\2\u01b8\u01b7\3\2\2\2\u01b9\u01bc")
        buf.write("\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb")
        buf.write("\u01bd\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01be\7\21\2")
        buf.write("\2\u01be%\3\2\2\2\u01bf\u01c1\7/\2\2\u01c0\u01bf\3\2\2")
        buf.write("\2\u01c0\u01c1\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c3")
        buf.write("\7J\2\2\u01c3\u01c4\5d\63\2\u01c4\u01c5\5(\25\2\u01c5")
        buf.write("\'\3\2\2\2\u01c6\u01c8\7\16\2\2\u01c7\u01c9\7N\2\2\u01c8")
        buf.write("\u01c7\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\3\2\2\2")
        buf.write("\u01ca\u01cf\5*\26\2\u01cb\u01cc\7\17\2\2\u01cc\u01ce")
        buf.write("\5*\26\2\u01cd\u01cb\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf")
        buf.write("\u01cd\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d3\3\2\2\2")
        buf.write("\u01d1\u01cf\3\2\2\2\u01d2\u01c6\3\2\2\2\u01d2\u01d3\3")
        buf.write("\2\2\2\u01d3\u01dd\3\2\2\2\u01d4\u01d5\7K\2\2\u01d5\u01da")
        buf.write("\5\30\r\2\u01d6\u01d7\7\17\2\2\u01d7\u01d9\5\30\r\2\u01d8")
        buf.write("\u01d6\3\2\2\2\u01d9\u01dc\3\2\2\2\u01da\u01d8\3\2\2\2")
        buf.write("\u01da\u01db\3\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da\3")
        buf.write("\2\2\2\u01dd\u01d4\3\2\2\2\u01dd\u01de\3\2\2\2\u01de)")
        buf.write("\3\2\2\2\u01df\u01e0\5\32\16\2\u01e0+\3\2\2\2\u01e1\u01e5")
        buf.write("\5\24\13\2\u01e2\u01e5\5.\30\2\u01e3\u01e5\5\60\31\2\u01e4")
        buf.write("\u01e1\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e3\3\2\2\2")
        buf.write("\u01e5-\3\2\2\2\u01e6\u01e7\t\3\2\2\u01e7\u01e8\5V,\2")
        buf.write("\u01e8\u01e9\5`\61\2\u01e9\u01ea\7\r\2\2\u01ea/\3\2\2")
        buf.write("\2\u01eb\u01ec\7E\2\2\u01ec\u01ed\5d\63\2\u01ed\u01ef")
        buf.write("\7\22\2\2\u01ee\u01f0\5\62\32\2\u01ef\u01ee\3\2\2\2\u01ef")
        buf.write("\u01f0\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\7\23\2")
        buf.write("\2\u01f2\u01f4\5\u00a8U\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\7\r\2\2\u01f6")
        buf.write("\61\3\2\2\2\u01f7\u01fc\5\64\33\2\u01f8\u01f9\7\17\2\2")
        buf.write("\u01f9\u01fb\5\64\33\2\u01fa\u01f8\3\2\2\2\u01fb\u01fe")
        buf.write("\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd")
        buf.write("\63\3\2\2\2\u01fe\u01fc\3\2\2\2\u01ff\u0200\5\66\34\2")
        buf.write("\u0200\u0201\5\u00acW\2\u0201\u0202\5d\63\2\u0202\65\3")
        buf.write("\2\2\2\u0203\u0204\7<\2\2\u0204\67\3\2\2\2\u0205\u0206")
        buf.write("\7H\2\2\u0206\u0207\5:\36\2\u0207\u0208\5d\63\2\u0208")
        buf.write("\u0209\7 \2\2\u0209\u020a\5<\37\2\u020a9\3\2\2\2\u020b")
        buf.write("\u0211\5Z.\2\u020c\u0211\5\u0090I\2\u020d\u0211\5\u0092")
        buf.write("J\2\u020e\u0211\5\u00b0Y\2\u020f\u0211\5\32\16\2\u0210")
        buf.write("\u020b\3\2\2\2\u0210\u020c\3\2\2\2\u0210\u020d\3\2\2\2")
        buf.write("\u0210\u020e\3\2\2\2\u0210\u020f\3\2\2\2\u0211;\3\2\2")
        buf.write("\2\u0212\u0215\5J&\2\u0213\u0215\5> \2\u0214\u0212\3\2")
        buf.write("\2\2\u0214\u0213\3\2\2\2\u0215=\3\2\2\2\u0216\u021b\5")
        buf.write("@!\2\u0217\u0218\7\37\2\2\u0218\u021a\5@!\2\u0219\u0217")
        buf.write("\3\2\2\2\u021a\u021d\3\2\2\2\u021b\u0219\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c?\3\2\2\2\u021d\u021b\3\2\2\2\u021e")
        buf.write("\u0223\5B\"\2\u021f\u0220\7\35\2\2\u0220\u0222\5B\"\2")
        buf.write("\u0221\u021f\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3")
        buf.write("\2\2\2\u0223\u0224\3\2\2\2\u0224A\3\2\2\2\u0225\u0223")
        buf.write("\3\2\2\2\u0226\u022b\5D#\2\u0227\u0228\7\36\2\2\u0228")
        buf.write("\u022a\5D#\2\u0229\u0227\3\2\2\2\u022a\u022d\3\2\2\2\u022b")
        buf.write("\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022cC\3\2\2\2\u022d")
        buf.write("\u022b\3\2\2\2\u022e\u0233\5F$\2\u022f\u0230\t\4\2\2\u0230")
        buf.write("\u0232\5F$\2\u0231\u022f\3\2\2\2\u0232\u0235\3\2\2\2\u0233")
        buf.write("\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234E\3\2\2\2\u0235")
        buf.write("\u0233\3\2\2\2\u0236\u023b\5H%\2\u0237\u0238\t\5\2\2\u0238")
        buf.write("\u023a\5H%\2\u0239\u0237\3\2\2\2\u023a\u023d\3\2\2\2\u023b")
        buf.write("\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023cG\3\2\2\2\u023d")
        buf.write("\u023b\3\2\2\2\u023e\u0243\5J&\2\u023f\u0240\t\6\2\2\u0240")
        buf.write("\u0242\5J&\2\u0241\u023f\3\2\2\2\u0242\u0245\3\2\2\2\u0243")
        buf.write("\u0241\3\2\2\2\u0243\u0244\3\2\2\2\u0244I\3\2\2\2\u0245")
        buf.write("\u0243\3\2\2\2\u0246\u0247\5L\'\2\u0247\u0248\5N(\2\u0248")
        buf.write("\u024b\3\2\2\2\u0249\u024b\5N(\2\u024a\u0246\3\2\2\2\u024a")
        buf.write("\u0249\3\2\2\2\u024bK\3\2\2\2\u024c\u024d\t\7\2\2\u024d")
        buf.write("M\3\2\2\2\u024e\u0255\5\32\16\2\u024f\u0255\5P)\2\u0250")
        buf.write("\u0251\7\22\2\2\u0251\u0252\5<\37\2\u0252\u0253\7\23\2")
        buf.write("\2\u0253\u0255\3\2\2\2\u0254\u024e\3\2\2\2\u0254\u024f")
        buf.write("\3\2\2\2\u0254\u0250\3\2\2\2\u0255O\3\2\2\2\u0256\u0257")
        buf.write("\t\b\2\2\u0257Q\3\2\2\2\u0258\u0259\5<\37\2\u0259S\3\2")
        buf.write("\2\2\u025a\u025b\7,\2\2\u025b\u025c\5V,\2\u025c\u025d")
        buf.write("\5`\61\2\u025dU\3\2\2\2\u025e\u0261\5X-\2\u025f\u0261")
        buf.write("\5^\60\2\u0260\u025e\3\2\2\2\u0260\u025f\3\2\2\2\u0261")
        buf.write("W\3\2\2\2\u0262\u0266\5Z.\2\u0263\u0266\5\\/\2\u0264\u0266")
        buf.write("\5\32\16\2\u0265\u0262\3\2\2\2\u0265\u0263\3\2\2\2\u0265")
        buf.write("\u0264\3\2\2\2\u0266Y\3\2\2\2\u0267\u026e\5f\64\2\u0268")
        buf.write("\u026e\5h\65\2\u0269\u026e\5j\66\2\u026a\u026e\5l\67\2")
        buf.write("\u026b\u026e\5n8\2\u026c\u026e\5p9\2\u026d\u0267\3\2\2")
        buf.write("\2\u026d\u0268\3\2\2\2\u026d\u0269\3\2\2\2\u026d\u026a")
        buf.write("\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026e")
        buf.write("[\3\2\2\2\u026f\u0274\5\u008eH\2\u0270\u0274\5\u0090I")
        buf.write("\2\u0271\u0274\5\u0092J\2\u0272\u0274\5\u00aeX\2\u0273")
        buf.write("\u026f\3\2\2\2\u0273\u0270\3\2\2\2\u0273\u0271\3\2\2\2")
        buf.write("\u0273\u0272\3\2\2\2\u0274]\3\2\2\2\u0275\u0279\5v<\2")
        buf.write("\u0276\u0279\5|?\2\u0277\u0279\5\u0088E\2\u0278\u0275")
        buf.write("\3\2\2\2\u0278\u0276\3\2\2\2\u0278\u0277\3\2\2\2\u0279")
        buf.write("_\3\2\2\2\u027a\u027f\5b\62\2\u027b\u027c\7\17\2\2\u027c")
        buf.write("\u027e\5b\62\2\u027d\u027b\3\2\2\2\u027e\u0281\3\2\2\2")
        buf.write("\u027f\u027d\3\2\2\2\u027f\u0280\3\2\2\2\u0280a\3\2\2")
        buf.write("\2\u0281\u027f\3\2\2\2\u0282\u0285\5d\63\2\u0283\u0285")
        buf.write("\5\u0094K\2\u0284\u0282\3\2\2\2\u0284\u0283\3\2\2\2\u0285")
        buf.write("c\3\2\2\2\u0286\u0287\7m\2\2\u0287e\3\2\2\2\u0288\u028d")
        buf.write("\7^\2\2\u0289\u028d\7e\2\2\u028a\u028b\7@\2\2\u028b\u028d")
        buf.write("\7e\2\2\u028c\u0288\3\2\2\2\u028c\u0289\3\2\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028dg\3\2\2\2\u028e\u02a2\7?\2\2\u028f")
        buf.write("\u02a2\7@\2\2\u0290\u0291\7@\2\2\u0291\u02a2\7@\2\2\u0292")
        buf.write("\u0293\7O\2\2\u0293\u02a2\7?\2\2\u0294\u0295\7O\2\2\u0295")
        buf.write("\u02a2\7@\2\2\u0296\u0297\7O\2\2\u0297\u0298\7@\2\2\u0298")
        buf.write("\u02a2\7@\2\2\u0299\u02a2\7V\2\2\u029a\u02a2\7W\2\2\u029b")
        buf.write("\u02a2\7X\2\2\u029c\u02a2\7Y\2\2\u029d\u02a2\7Z\2\2\u029e")
        buf.write("\u02a2\7[\2\2\u029f\u02a2\7\\\2\2\u02a0\u02a2\7]\2\2\u02a1")
        buf.write("\u028e\3\2\2\2\u02a1\u028f\3\2\2\2\u02a1\u0290\3\2\2\2")
        buf.write("\u02a1\u0292\3\2\2\2\u02a1\u0294\3\2\2\2\u02a1\u0296\3")
        buf.write("\2\2\2\u02a1\u0299\3\2\2\2\u02a1\u029a\3\2\2\2\u02a1\u029b")
        buf.write("\3\2\2\2\u02a1\u029c\3\2\2\2\u02a1\u029d\3\2\2\2\u02a1")
        buf.write("\u029e\3\2\2\2\u02a1\u029f\3\2\2\2\u02a1\u02a0\3\2\2\2")
        buf.write("\u02a2i\3\2\2\2\u02a3\u02a4\7T\2\2\u02a4k\3\2\2\2\u02a5")
        buf.write("\u02a6\7;\2\2\u02a6m\3\2\2\2\u02a7\u02a8\7_\2\2\u02a8")
        buf.write("o\3\2\2\2\u02a9\u02aa\7\60\2\2\u02aaq\3\2\2\2\u02ab\u02ac")
        buf.write("\7S\2\2\u02acs\3\2\2\2\u02ad\u02ae\7M\2\2\u02aeu\3\2\2")
        buf.write("\2\u02af\u02b0\7\63\2\2\u02b0\u02b3\5d\63\2\u02b1\u02b2")
        buf.write("\7\16\2\2\u02b2\u02b4\5\32\16\2\u02b3\u02b1\3\2\2\2\u02b3")
        buf.write("\u02b4\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\7\20\2")
        buf.write("\2\u02b6\u02b7\5x=\2\u02b7\u02b8\7\21\2\2\u02b8w\3\2\2")
        buf.write("\2\u02b9\u02bb\5z>\2\u02ba\u02b9\3\2\2\2\u02bb\u02bc\3")
        buf.write("\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bdy")
        buf.write("\3\2\2\2\u02be\u02bf\5V,\2\u02bf\u02c0\5`\61\2\u02c0\u02c1")
        buf.write("\7\r\2\2\u02c1\u02ce\3\2\2\2\u02c2\u02c3\5\20\t\2\u02c3")
        buf.write("\u02c4\5V,\2\u02c4\u02c5\5`\61\2\u02c5\u02c6\7\r\2\2\u02c6")
        buf.write("\u02ce\3\2\2\2\u02c7\u02c8\5\20\t\2\u02c8\u02c9\7q\2\2")
        buf.write("\u02c9\u02ca\5V,\2\u02ca\u02cb\5`\61\2\u02cb\u02cc\7\r")
        buf.write("\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02be\3\2\2\2\u02cd\u02c2")
        buf.write("\3\2\2\2\u02cd\u02c7\3\2\2\2\u02ce{\3\2\2\2\u02cf\u02d0")
        buf.write("\7Q\2\2\u02d0\u02d1\5d\63\2\u02d1\u02d2\7*\2\2\u02d2\u02d3")
        buf.write("\7\22\2\2\u02d3\u02d4\5~@\2\u02d4\u02d5\7\23\2\2\u02d5")
        buf.write("\u02d6\7\20\2\2\u02d6\u02d7\5\u0080A\2\u02d7\u02d8\7\21")
        buf.write("\2\2\u02d8}\3\2\2\2\u02d9\u02df\5h\65\2\u02da\u02df\5")
        buf.write("j\66\2\u02db\u02df\5n8\2\u02dc\u02df\5\u0088E\2\u02dd")
        buf.write("\u02df\5\32\16\2\u02de\u02d9\3\2\2\2\u02de\u02da\3\2\2")
        buf.write("\2\u02de\u02db\3\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02dd")
        buf.write("\3\2\2\2\u02df\177\3\2\2\2\u02e0\u02e2\5\u0082B\2\u02e1")
        buf.write("\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u0081\3\2\2\2\u02e5\u02e7\5")
        buf.write("\u0084C\2\u02e6\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\3\2\2\2")
        buf.write("\u02ea\u02eb\5\u0086D\2\u02eb\u02ec\7\r\2\2\u02ec\u0083")
        buf.write("\3\2\2\2\u02ed\u02ee\7U\2\2\u02ee\u02ef\5<\37\2\u02ef")
        buf.write("\u02f0\7\16\2\2\u02f0\u02f4\3\2\2\2\u02f1\u02f2\7=\2\2")
        buf.write("\u02f2\u02f4\7\16\2\2\u02f3\u02ed\3\2\2\2\u02f3\u02f1")
        buf.write("\3\2\2\2\u02f4\u0085\3\2\2\2\u02f5\u02f6\5V,\2\u02f6\u02f7")
        buf.write("\5b\62\2\u02f7\u0087\3\2\2\2\u02f8\u02f9\7A\2\2\u02f9")
        buf.write("\u02fa\5d\63\2\u02fa\u02fb\7\20\2\2\u02fb\u02fc\5\u008a")
        buf.write("F\2\u02fc\u02fd\7\21\2\2\u02fd\u0089\3\2\2\2\u02fe\u0303")
        buf.write("\5\u008cG\2\u02ff\u0300\7\17\2\2\u0300\u0302\5\u008cG")
        buf.write("\2\u0301\u02ff\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301")
        buf.write("\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u008b\3\2\2\2\u0305")
        buf.write("\u0303\3\2\2\2\u0306\u030c\5d\63\2\u0307\u0308\5d\63\2")
        buf.write("\u0308\u0309\7 \2\2\u0309\u030a\7\3\2\2\u030a\u030c\3")
        buf.write("\2\2\2\u030b\u0306\3\2\2\2\u030b\u0307\3\2\2\2\u030c\u008d")
        buf.write("\3\2\2\2\u030d\u030e\7\61\2\2\u030e\u030f\7\30\2\2\u030f")
        buf.write("\u0310\5X-\2\u0310\u0311\7\17\2\2\u0311\u0312\5R*\2\u0312")
        buf.write("\u0313\7\31\2\2\u0313\u031a\3\2\2\2\u0314\u0315\7\61\2")
        buf.write("\2\u0315\u0316\7\30\2\2\u0316\u0317\5X-\2\u0317\u0318")
        buf.write("\7\31\2\2\u0318\u031a\3\2\2\2\u0319\u030d\3\2\2\2\u0319")
        buf.write("\u0314\3\2\2\2\u031a\u008f\3\2\2\2\u031b\u031c\7)\2\2")
        buf.write("\u031c\u031d\7\30\2\2\u031d\u031e\5R*\2\u031e\u031f\7")
        buf.write("\31\2\2\u031f\u0322\3\2\2\2\u0320\u0322\7)\2\2\u0321\u031b")
        buf.write("\3\2\2\2\u0321\u0320\3\2\2\2\u0322\u0091\3\2\2\2\u0323")
        buf.write("\u0324\7B\2\2\u0324\u0325\7\30\2\2\u0325\u0326\5R*\2\u0326")
        buf.write("\u0327\7\31\2\2\u0327\u032a\3\2\2\2\u0328\u032a\7B\2\2")
        buf.write("\u0329\u0323\3\2\2\2\u0329\u0328\3\2\2\2\u032a\u0093\3")
        buf.write("\2\2\2\u032b\u032d\5d\63\2\u032c\u032e\5\u0096L\2\u032d")
        buf.write("\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u032d\3\2\2\2")
        buf.write("\u032f\u0330\3\2\2\2\u0330\u0095\3\2\2\2\u0331\u0332\7")
        buf.write("\24\2\2\u0332\u0333\5R*\2\u0333\u0334\7\25\2\2\u0334\u0097")
        buf.write("\3\2\2\2\u0335\u0338\5\u00be`\2\u0336\u0338\5\u00c2b\2")
        buf.write("\u0337\u0335\3\2\2\2\u0337\u0336\3\2\2\2\u0338\u0099\3")
        buf.write("\2\2\2\u0339\u033a\7F\2\2\u033a\u033b\5d\63\2\u033b\u033f")
        buf.write("\7\20\2\2\u033c\u033e\5z>\2\u033d\u033c\3\2\2\2\u033e")
        buf.write("\u0341\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2")
        buf.write("\u0340\u0342\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0343\7")
        buf.write("\21\2\2\u0343\u009b\3\2\2\2\u0344\u0346\5\u009eP\2\u0345")
        buf.write("\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347\3\2\2\2")
        buf.write("\u0347\u0348\5\u00a0Q\2\u0348\u0349\5d\63\2\u0349\u034b")
        buf.write("\5\u00a2R\2\u034a\u034c\5\u00a8U\2\u034b\u034a\3\2\2\2")
        buf.write("\u034b\u034c\3\2\2\2\u034c\u034e\3\2\2\2\u034d\u034f\5")
        buf.write("\u00aaV\2\u034e\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u009d\3\2\2\2\u0350\u0351\7R\2\2\u0351\u009f\3\2\2\2")
        buf.write("\u0352\u0355\5\u00acW\2\u0353\u0355\78\2\2\u0354\u0352")
        buf.write("\3\2\2\2\u0354\u0353\3\2\2\2\u0355\u00a1\3\2\2\2\u0356")
        buf.write("\u0357\7\22\2\2\u0357\u035c\5\u00a4S\2\u0358\u0359\7\17")
        buf.write("\2\2\u0359\u035b\5\u00a4S\2\u035a\u0358\3\2\2\2\u035b")
        buf.write("\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d\3\2\2\2")
        buf.write("\u035d\u035f\3\2\2\2\u035e\u035c\3\2\2\2\u035f\u0360\7")
        buf.write("\23\2\2\u0360\u0364\3\2\2\2\u0361\u0362\7\22\2\2\u0362")
        buf.write("\u0364\7\23\2\2\u0363\u0356\3\2\2\2\u0363\u0361\3\2\2")
        buf.write("\2\u0364\u00a3\3\2\2\2\u0365\u0366\5\u00a6T\2\u0366\u0367")
        buf.write("\5\u00acW\2\u0367\u0368\5d\63\2\u0368\u00a5\3\2\2\2\u0369")
        buf.write("\u036a\t\t\2\2\u036a\u00a7\3\2\2\2\u036b\u036c\7\67\2")
        buf.write("\2\u036c\u036d\7\22\2\2\u036d\u0372\5\32\16\2\u036e\u036f")
        buf.write("\7\17\2\2\u036f\u0371\5\32\16\2\u0370\u036e\3\2\2\2\u0371")
        buf.write("\u0374\3\2\2\2\u0372\u0370\3\2\2\2\u0372\u0373\3\2\2\2")
        buf.write("\u0373\u0375\3\2\2\2\u0374\u0372\3\2\2\2\u0375\u0376\7")
        buf.write("\23\2\2\u0376\u00a9\3\2\2\2\u0377\u0378\7C\2\2\u0378\u0379")
        buf.write("\7\22\2\2\u0379\u037e\7\13\2\2\u037a\u037b\7\17\2\2\u037b")
        buf.write("\u037d\7\13\2\2\u037c\u037a\3\2\2\2\u037d\u0380\3\2\2")
        buf.write("\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381")
        buf.write("\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u0382\7\23\2\2\u0382")
        buf.write("\u00ab\3\2\2\2\u0383\u0388\5Z.\2\u0384\u0388\5\u0090I")
        buf.write("\2\u0385\u0388\5\u0092J\2\u0386\u0388\5\32\16\2\u0387")
        buf.write("\u0383\3\2\2\2\u0387\u0384\3\2\2\2\u0387\u0385\3\2\2\2")
        buf.write("\u0387\u0386\3\2\2\2\u0388\u00ad\3\2\2\2\u0389\u038a\7")
        buf.write("P\2\2\u038a\u038b\7\30\2\2\u038b\u038c\5R*\2\u038c\u038d")
        buf.write("\7\17\2\2\u038d\u038e\5R*\2\u038e\u038f\7\31\2\2\u038f")
        buf.write("\u00af\3\2\2\2\u0390\u0391\7P\2\2\u0391\u00b1\3\2\2\2")
        buf.write("\u0392\u0393\7I\2\2\u0393\u00b3\3\2\2\2\u0394\u0395\7")
        buf.write("\63\2\2\u0395\u0399\5d\63\2\u0396\u0397\7Q\2\2\u0397\u0399")
        buf.write("\5d\63\2\u0398\u0394\3\2\2\2\u0398\u0396\3\2\2\2\u0399")
        buf.write("\u00b5\3\2\2\2\u039a\u039b\7\62\2\2\u039b\u039c\5\u00b8")
        buf.write("]\2\u039c\u039d\7\r\2\2\u039d\u00b7\3\2\2\2\u039e\u03a1")
        buf.write("\5\32\16\2\u039f\u03a1\7\13\2\2\u03a0\u039e\3\2\2\2\u03a0")
        buf.write("\u039f\3\2\2\2\u03a1\u00b9\3\2\2\2\u03a2\u03a3\7g\2\2")
        buf.write("\u03a3\u03a4\5\32\16\2\u03a4\u03a5\7\13\2\2\u03a5\u00bb")
        buf.write("\3\2\2\2\u03a6\u03a7\7f\2\2\u03a7\u03a8\5\32\16\2\u03a8")
        buf.write("\u03a9\7\13\2\2\u03a9\u00bd\3\2\2\2\u03aa\u03ab\7\65\2")
        buf.write("\2\u03ab\u03ac\7h\2\2\u03ac\u03ad\5\u00acW\2\u03ad\u03ae")
        buf.write("\5\u00c0a\2\u03ae\u00bf\3\2\2\2\u03af\u03b0\5d\63\2\u03b0")
        buf.write("\u03b1\5\u00a8U\2\u03b1\u03bb\3\2\2\2\u03b2\u03b7\5d\63")
        buf.write("\2\u03b3\u03b4\7\17\2\2\u03b4\u03b6\5d\63\2\u03b5\u03b3")
        buf.write("\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03ba\u03af\3\2\2\2\u03ba\u03b2\3\2\2\2\u03bb\u00c1\3")
        buf.write("\2\2\2\u03bc\u03bd\7h\2\2\u03bd\u03be\5\u00acW\2\u03be")
        buf.write("\u03bf\5\u00c4c\2\u03bf\u00c3\3\2\2\2\u03c0\u03c1\5d\63")
        buf.write("\2\u03c1\u03c2\5\u00c6d\2\u03c2\u03cc\3\2\2\2\u03c3\u03c8")
        buf.write("\5d\63\2\u03c4\u03c5\7\17\2\2\u03c5\u03c7\5d\63\2\u03c6")
        buf.write("\u03c4\3\2\2\2\u03c7\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2")
        buf.write("\u03c8\u03c9\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3")
        buf.write("\2\2\2\u03cb\u03c0\3\2\2\2\u03cb\u03c3\3\2\2\2\u03cc\u00c5")
        buf.write("\3\2\2\2\u03cd\u03cf\5\u00c8e\2\u03ce\u03d0\5\u00caf\2")
        buf.write("\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d3\3")
        buf.write("\2\2\2\u03d1\u03d3\5\u00caf\2\u03d2\u03cd\3\2\2\2\u03d2")
        buf.write("\u03d1\3\2\2\2\u03d3\u00c7\3\2\2\2\u03d4\u03d5\7G\2\2")
        buf.write("\u03d5\u03d6\5\u00ccg\2\u03d6\u00c9\3\2\2\2\u03d7\u03d8")
        buf.write("\7&\2\2\u03d8\u03d9\5\u00ccg\2\u03d9\u00cb\3\2\2\2\u03da")
        buf.write("\u03db\7\22\2\2\u03db\u03e0\5\32\16\2\u03dc\u03dd\7\17")
        buf.write("\2\2\u03dd\u03df\5\32\16\2\u03de\u03dc\3\2\2\2\u03df\u03e2")
        buf.write("\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e3\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3\u03e4\7\23\2")
        buf.write("\2\u03e4\u00cd\3\2\2\2\u03e5\u03e8\5\u00d2j\2\u03e6\u03e8")
        buf.write("\5\u00d0i\2\u03e7\u03e5\3\2\2\2\u03e7\u03e6\3\2\2\2\u03e8")
        buf.write("\u00cf\3\2\2\2\u03e9\u03ea\7l\2\2\u03ea\u03eb\5d\63\2")
        buf.write("\u03eb\u00d1\3\2\2\2\u03ec\u03ed\5\u00d4k\2\u03ed\u03ee")
        buf.write("\7\20\2\2\u03ee\u03ef\5\u00dan\2\u03ef\u03f0\7\21\2\2")
        buf.write("\u03f0\u00d3\3\2\2\2\u03f1\u03f2\7l\2\2\u03f2\u03f4\5")
        buf.write("d\63\2\u03f3\u03f5\5\u00d8m\2\u03f4\u03f3\3\2\2\2\u03f4")
        buf.write("\u03f5\3\2\2\2\u03f5\u03f7\3\2\2\2\u03f6\u03f8\5\u00d6")
        buf.write("l\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u00d5")
        buf.write("\3\2\2\2\u03f9\u03fa\7K\2\2\u03fa\u03ff\5\32\16\2\u03fb")
        buf.write("\u03fc\7\17\2\2\u03fc\u03fe\5\32\16\2\u03fd\u03fb\3\2")
        buf.write("\2\2\u03fe\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400")
        buf.write("\3\2\2\2\u0400\u00d7\3\2\2\2\u0401\u03ff\3\2\2\2\u0402")
        buf.write("\u0403\7\16\2\2\u0403\u0404\5\32\16\2\u0404\u00d9\3\2")
        buf.write("\2\2\u0405\u0407\5\u00dco\2\u0406\u0405\3\2\2\2\u0407")
        buf.write("\u040a\3\2\2\2\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2")
        buf.write("\u0409\u00db\3\2\2\2\u040a\u0408\3\2\2\2\u040b\u040c\5")
        buf.write("\u00dep\2\u040c\u040d\7\r\2\2\u040d\u041e\3\2\2\2\u040e")
        buf.write("\u040f\5\u00e2r\2\u040f\u0410\7\r\2\2\u0410\u041e\3\2")
        buf.write("\2\2\u0411\u0412\5\u00e4s\2\u0412\u0413\7\r\2\2\u0413")
        buf.write("\u041e\3\2\2\2\u0414\u0415\5\u00e6t\2\u0415\u0416\7\r")
        buf.write("\2\2\u0416\u041e\3\2\2\2\u0417\u0418\5\u00e8u\2\u0418")
        buf.write("\u0419\7\r\2\2\u0419\u041e\3\2\2\2\u041a\u041b\5\u0098")
        buf.write("M\2\u041b\u041c\7\r\2\2\u041c\u041e\3\2\2\2\u041d\u040b")
        buf.write("\3\2\2\2\u041d\u040e\3\2\2\2\u041d\u0411\3\2\2\2\u041d")
        buf.write("\u0414\3\2\2\2\u041d\u0417\3\2\2\2\u041d\u041a\3\2\2\2")
        buf.write("\u041e\u00dd\3\2\2\2\u041f\u0420\7c\2\2\u0420\u0421\5")
        buf.write("\u00e0q\2\u0421\u0422\5d\63\2\u0422\u00df\3\2\2\2\u0423")
        buf.write("\u0426\5\32\16\2\u0424\u0426\7M\2\2\u0425\u0423\3\2\2")
        buf.write("\2\u0425\u0424\3\2\2\2\u0426\u00e1\3\2\2\2\u0427\u0429")
        buf.write("\7-\2\2\u0428\u042a\7`\2\2\u0429\u0428\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\5\u00e0q\2\u042c")
        buf.write("\u042d\5d\63\2\u042d\u00e3\3\2\2\2\u042e\u042f\7(\2\2")
        buf.write("\u042f\u0430\5\32\16\2\u0430\u0431\5d\63\2\u0431\u00e5")
        buf.write("\3\2\2\2\u0432\u0433\7+\2\2\u0433\u0434\5\32\16\2\u0434")
        buf.write("\u0435\5d\63\2\u0435\u00e7\3\2\2\2\u0436\u0437\7d\2\2")
        buf.write("\u0437\u0438\5\32\16\2\u0438\u0439\5d\63\2\u0439\u00e9")
        buf.write("\3\2\2\2\u043a\u043b\5\u00ecw\2\u043b\u043c\5\u00f2z\2")
        buf.write("\u043c\u00eb\3\2\2\2\u043d\u043e\7D\2\2\u043e\u0440\5")
        buf.write("d\63\2\u043f\u0441\5\u00eex\2\u0440\u043f\3\2\2\2\u0440")
        buf.write("\u0441\3\2\2\2\u0441\u0443\3\2\2\2\u0442\u0444\5\u00d6")
        buf.write("l\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445")
        buf.write("\3\2\2\2\u0445\u0446\7j\2\2\u0446\u0448\5\32\16\2\u0447")
        buf.write("\u0449\5\u00f0y\2\u0448\u0447\3\2\2\2\u0448\u0449\3\2")
        buf.write("\2\2\u0449\u00ed\3\2\2\2\u044a\u044b\7\16\2\2\u044b\u044c")
        buf.write("\5\32\16\2\u044c\u00ef\3\2\2\2\u044d\u044e\7.\2\2\u044e")
        buf.write("\u044f\5\32\16\2\u044f\u00f1\3\2\2\2\u0450\u0454\7\20")
        buf.write("\2\2\u0451\u0453\5\u00f4{\2\u0452\u0451\3\2\2\2\u0453")
        buf.write("\u0456\3\2\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2\2\2")
        buf.write("\u0455\u0457\3\2\2\2\u0456\u0454\3\2\2\2\u0457\u0458\7")
        buf.write("\21\2\2\u0458\u00f3\3\2\2\2\u0459\u0461\5\24\13\2\u045a")
        buf.write("\u045b\5\u00f6|\2\u045b\u045c\7\r\2\2\u045c\u0461\3\2")
        buf.write("\2\2\u045d\u045e\5\u00f8}\2\u045e\u045f\7\r\2\2\u045f")
        buf.write("\u0461\3\2\2\2\u0460\u0459\3\2\2\2\u0460\u045a\3\2\2\2")
        buf.write("\u0460\u045d\3\2\2\2\u0461\u00f5\3\2\2\2\u0462\u0463\7")
        buf.write("E\2\2\u0463\u0464\5d\63\2\u0464\u0466\7\22\2\2\u0465\u0467")
        buf.write("\5\62\32\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2\2\2\u0467")
        buf.write("\u0468\3\2\2\2\u0468\u046a\7\23\2\2\u0469\u046b\5\u00a8")
        buf.write("U\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u00f7")
        buf.write("\3\2\2\2\u046c\u046d\7\66\2\2\u046d\u046e\5d\63\2\u046e")
        buf.write("\u0470\7\22\2\2\u046f\u0471\5\62\32\2\u0470\u046f\3\2")
        buf.write("\2\2\u0470\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474")
        buf.write("\7\23\2\2\u0473\u0475\5\u00a8U\2\u0474\u0473\3\2\2\2\u0474")
        buf.write("\u0475\3\2\2\2\u0475\u00f9\3\2\2\2\u0476\u047a\5\u0100")
        buf.write("\u0081\2\u0477\u047a\5\u00fe\u0080\2\u0478\u047a\5\u00fc")
        buf.write("\177\2\u0479\u0476\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u0478")
        buf.write("\3\2\2\2\u047a\u00fb\3\2\2\2\u047b\u047d\7a\2\2\u047c")
        buf.write("\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047e\3\2\2\2")
        buf.write("\u047e\u047f\7:\2\2\u047f\u0480\5d\63\2\u0480\u00fd\3")
        buf.write("\2\2\2\u0481\u0482\7a\2\2\u0482\u0483\7:\2\2\u0483\u0484")
        buf.write("\5d\63\2\u0484\u0485\5(\25\2\u0485\u0489\7\20\2\2\u0486")
        buf.write("\u0488\5\24\13\2\u0487\u0486\3\2\2\2\u0488\u048b\3\2\2")
        buf.write("\2\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c")
        buf.write("\3\2\2\2\u048b\u0489\3\2\2\2\u048c\u048d\7\21\2\2\u048d")
        buf.write("\u00ff\3\2\2\2\u048e\u048f\5\u0102\u0082\2\u048f\u0493")
        buf.write("\7\20\2\2\u0490\u0492\5,\27\2\u0491\u0490\3\2\2\2\u0492")
        buf.write("\u0495\3\2\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2")
        buf.write("\u0494\u0496\3\2\2\2\u0495\u0493\3\2\2\2\u0496\u0497\7")
        buf.write("\21\2\2\u0497\u0101\3\2\2\2\u0498\u049a\7/\2\2\u0499\u0498")
        buf.write("\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049b\3\2\2\2\u049b")
        buf.write("\u049c\7:\2\2\u049c\u049d\5d\63\2\u049d\u049e\5(\25\2")
        buf.write("\u049e\u0103\3\2\2\2h\u0107\u010d\u012e\u0136\u013c\u0144")
        buf.write("\u014a\u014f\u0157\u015c\u0180\u0188\u018e\u0195\u019c")
        buf.write("\u019f\u01b0\u01ba\u01c0\u01c8\u01cf\u01d2\u01da\u01dd")
        buf.write("\u01e4\u01ef\u01f3\u01fc\u0210\u0214\u021b\u0223\u022b")
        buf.write("\u0233\u023b\u0243\u024a\u0254\u0260\u0265\u026d\u0273")
        buf.write("\u0278\u027f\u0284\u028c\u02a1\u02b3\u02bc\u02cd\u02de")
        buf.write("\u02e3\u02e8\u02f3\u0303\u030b\u0319\u0321\u0329\u032f")
        buf.write("\u0337\u033f\u0345\u034b\u034e\u0354\u035c\u0363\u0372")
        buf.write("\u037e\u0387\u0398\u03a0\u03b7\u03ba\u03c8\u03cb\u03cf")
        buf.write("\u03d2\u03e0\u03e7\u03f4\u03f7\u03ff\u0408\u041d\u0425")
        buf.write("\u0429\u0440\u0443\u0448\u0454\u0460\u0466\u046a\u0470")
        buf.write("\u0474\u0479\u047c\u0489\u0493\u0499")
        return buf.getvalue()


class IDLParser ( Parser ):

    grammarFileName = "IDL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'{'", "'}'", "'('", "')'", "'['", "']'", "'~'", 
                     "'/'", "'<'", "'>'", "'*'", "'+'", "'-'", "'^'", "'&'", 
                     "'|'", "'='", "'%'", "'@'", "'::'", "'>>'", "'<<'", 
                     "'setraises'", "'out'", "'emits'", "'string'", "'switch'", 
                     "'publishes'", "'typedef'", "'uses'", "'primarykey'", 
                     "'custom'", "'octet'", "'sequence'", "'import'", "'struct'", 
                     "'native'", "'readonly'", "'finder'", "'raises'", "'void'", 
                     "'private'", "'eventtype'", "'wchar'", "'in'", "'default'", 
                     "'public'", "'short'", "'long'", "'enum'", "'wstring'", 
                     "'context'", "'home'", "'factory'", "'exception'", 
                     "'getraises'", "'const'", "'ValueBase'", "'valuetype'", 
                     "'supports'", "'module'", "'Object'", "'truncatable'", 
                     "'unsigned'", "'fixed'", "'union'", "'oneway'", "'any'", 
                     "'char'", "'case'", "'int8'", "'int16'", "'int32'", 
                     "'int64'", "'uint8'", "'uint16'", "'uint32'", "'uint64'", 
                     "'float'", "'boolean'", "'multiple'", "'abstract'", 
                     "'inout'", "'provides'", "'consumes'", "'double'", 
                     "'typeprefix'", "'typeid'", "'attribute'", "'local'", 
                     "'manages'", "'interface'", "'component'" ]

    symbolicNames = [ "<INVALID>", "INTEGER_LITERAL", "OCTAL_LITERAL", "HEX_LITERAL", 
                      "FLOATING_PT_LITERAL", "FIXED_PT_LITERAL", "WIDE_CHARACTER_LITERAL", 
                      "CHARACTER_LITERAL", "WIDE_STRING_LITERAL", "STRING_LITERAL", 
                      "BOOLEAN_LITERAL", "SEMICOLON", "COLON", "COMA", "LEFT_BRACE", 
                      "RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_SQUARE_BRACKET", 
                      "RIGHT_SQUARE_BRACKET", "TILDE", "SLASH", "LEFT_ANG_BRACKET", 
                      "RIGHT_ANG_BRACKET", "STAR", "PLUS", "MINUS", "CARET", 
                      "AMPERSAND", "PIPE", "EQUAL", "PERCENT", "AT", "DOUBLE_COLON", 
                      "RIGHT_SHIFT", "LEFT_SHIFT", "KW_SETRAISES", "KW_OUT", 
                      "KW_EMITS", "KW_STRING", "KW_SWITCH", "KW_PUBLISHES", 
                      "KW_TYPEDEF", "KW_USES", "KW_PRIMARYKEY", "KW_CUSTOM", 
                      "KW_OCTET", "KW_SEQUENCE", "KW_IMPORT", "KW_STRUCT", 
                      "KW_NATIVE", "KW_READONLY", "KW_FINDER", "KW_RAISES", 
                      "KW_VOID", "KW_PRIVATE", "KW_EVENTTYPE", "KW_WCHAR", 
                      "KW_IN", "KW_DEFAULT", "KW_PUBLIC", "KW_SHORT", "KW_LONG", 
                      "KW_ENUM", "KW_WSTRING", "KW_CONTEXT", "KW_HOME", 
                      "KW_FACTORY", "KW_EXCEPTION", "KW_GETRAISES", "KW_CONST", 
                      "KW_VALUEBASE", "KW_VALUETYPE", "KW_SUPPORTS", "KW_MODULE", 
                      "KW_OBJECT", "KW_TRUNCATABLE", "KW_UNSIGNED", "KW_FIXED", 
                      "KW_UNION", "KW_ONEWAY", "KW_ANY", "KW_CHAR", "KW_CASE", 
                      "KW_INT8", "KW_INT16", "KW_INT32", "KW_INT64", "KW_UINT8", 
                      "KW_UINT16", "KW_UINT32", "KW_UINT64", "KW_FLOAT", 
                      "KW_BOOLEAN", "KW_MULTIPLE", "KW_ABSTRACT", "KW_INOUT", 
                      "KW_PROVIDES", "KW_CONSUMES", "KW_DOUBLE", "KW_TYPEPREFIX", 
                      "KW_TYPEID", "KW_ATTRIBUTE", "KW_LOCAL", "KW_MANAGES", 
                      "KW_INTERFACE", "KW_COMPONENT", "ID", "WS", "COMMENT", 
                      "LINE_COMMENT", "NEWLINE" ]

    RULE_specification = 0
    RULE_definition = 1
    RULE_module = 2
    RULE_interface_or_forward_decl = 3
    RULE_interface_decl = 4
    RULE_forward_decl = 5
    RULE_interface_header = 6
    RULE_annotation = 7
    RULE_interface_body = 8
    RULE_export = 9
    RULE_interface_inheritance_spec = 10
    RULE_interface_name = 11
    RULE_scoped_name = 12
    RULE_value = 13
    RULE_value_forward_decl = 14
    RULE_value_box_decl = 15
    RULE_value_abs_decl = 16
    RULE_value_decl = 17
    RULE_value_header = 18
    RULE_value_inheritance_spec = 19
    RULE_value_name = 20
    RULE_value_element = 21
    RULE_state_member = 22
    RULE_init_decl = 23
    RULE_init_param_decls = 24
    RULE_init_param_decl = 25
    RULE_init_param_attribute = 26
    RULE_const_decl = 27
    RULE_const_type = 28
    RULE_const_exp = 29
    RULE_or_expr = 30
    RULE_xor_expr = 31
    RULE_and_expr = 32
    RULE_shift_expr = 33
    RULE_add_expr = 34
    RULE_mult_expr = 35
    RULE_unary_expr = 36
    RULE_unary_operator = 37
    RULE_primary_expr = 38
    RULE_literal = 39
    RULE_positive_int_const = 40
    RULE_typedef_type = 41
    RULE_type_spec = 42
    RULE_simple_type_spec = 43
    RULE_primitive_type_spec = 44
    RULE_template_type_spec = 45
    RULE_constr_type_spec = 46
    RULE_declarators = 47
    RULE_declarator = 48
    RULE_simple_declarator = 49
    RULE_floating_pt_type = 50
    RULE_integer_type = 51
    RULE_char_type = 52
    RULE_wide_char_type = 53
    RULE_boolean_type = 54
    RULE_octet_type = 55
    RULE_any_type = 56
    RULE_object_type = 57
    RULE_struct_type = 58
    RULE_member_list = 59
    RULE_member = 60
    RULE_union_type = 61
    RULE_switch_type_spec = 62
    RULE_switch_body = 63
    RULE_case_stmt = 64
    RULE_case_label = 65
    RULE_element_spec = 66
    RULE_enum_type = 67
    RULE_enumerator_list = 68
    RULE_enumerator = 69
    RULE_sequence_type = 70
    RULE_string_type = 71
    RULE_wide_string_type = 72
    RULE_array_declarator = 73
    RULE_fixed_array_size = 74
    RULE_attr_decl = 75
    RULE_except_decl = 76
    RULE_op_decl = 77
    RULE_op_attribute = 78
    RULE_op_type_spec = 79
    RULE_parameter_decls = 80
    RULE_param_decl = 81
    RULE_param_attribute = 82
    RULE_raises_expr = 83
    RULE_context_expr = 84
    RULE_param_type_spec = 85
    RULE_fixed_pt_type = 86
    RULE_fixed_pt_const_type = 87
    RULE_value_base_type = 88
    RULE_constr_forward_decl = 89
    RULE_import_decl = 90
    RULE_imported_scope = 91
    RULE_type_id_decl = 92
    RULE_type_prefix_decl = 93
    RULE_readonly_attr_spec = 94
    RULE_readonly_attr_declarator = 95
    RULE_attr_spec = 96
    RULE_attr_declarator = 97
    RULE_attr_raises_expr = 98
    RULE_get_excep_expr = 99
    RULE_set_excep_expr = 100
    RULE_exception_list = 101
    RULE_component = 102
    RULE_component_forward_decl = 103
    RULE_component_decl = 104
    RULE_component_header = 105
    RULE_supported_interface_spec = 106
    RULE_component_inheritance_spec = 107
    RULE_component_body = 108
    RULE_component_export = 109
    RULE_provides_decl = 110
    RULE_interface_type = 111
    RULE_uses_decl = 112
    RULE_emits_decl = 113
    RULE_publishes_decl = 114
    RULE_consumes_decl = 115
    RULE_home_decl = 116
    RULE_home_header = 117
    RULE_home_inheritance_spec = 118
    RULE_primary_key_spec = 119
    RULE_home_body = 120
    RULE_home_export = 121
    RULE_factory_decl = 122
    RULE_finder_decl = 123
    RULE_event = 124
    RULE_event_forward_decl = 125
    RULE_event_abs_decl = 126
    RULE_event_decl = 127
    RULE_event_header = 128

    ruleNames =  [ "specification", "definition", "module", "interface_or_forward_decl", 
                   "interface_decl", "forward_decl", "interface_header", 
                   "annotation", "interface_body", "export", "interface_inheritance_spec", 
                   "interface_name", "scoped_name", "value", "value_forward_decl", 
                   "value_box_decl", "value_abs_decl", "value_decl", "value_header", 
                   "value_inheritance_spec", "value_name", "value_element", 
                   "state_member", "init_decl", "init_param_decls", "init_param_decl", 
                   "init_param_attribute", "const_decl", "const_type", "const_exp", 
                   "or_expr", "xor_expr", "and_expr", "shift_expr", "add_expr", 
                   "mult_expr", "unary_expr", "unary_operator", "primary_expr", 
                   "literal", "positive_int_const", "typedef_type", "type_spec", 
                   "simple_type_spec", "primitive_type_spec", "template_type_spec", 
                   "constr_type_spec", "declarators", "declarator", "simple_declarator", 
                   "floating_pt_type", "integer_type", "char_type", "wide_char_type", 
                   "boolean_type", "octet_type", "any_type", "object_type", 
                   "struct_type", "member_list", "member", "union_type", 
                   "switch_type_spec", "switch_body", "case_stmt", "case_label", 
                   "element_spec", "enum_type", "enumerator_list", "enumerator", 
                   "sequence_type", "string_type", "wide_string_type", "array_declarator", 
                   "fixed_array_size", "attr_decl", "except_decl", "op_decl", 
                   "op_attribute", "op_type_spec", "parameter_decls", "param_decl", 
                   "param_attribute", "raises_expr", "context_expr", "param_type_spec", 
                   "fixed_pt_type", "fixed_pt_const_type", "value_base_type", 
                   "constr_forward_decl", "import_decl", "imported_scope", 
                   "type_id_decl", "type_prefix_decl", "readonly_attr_spec", 
                   "readonly_attr_declarator", "attr_spec", "attr_declarator", 
                   "attr_raises_expr", "get_excep_expr", "set_excep_expr", 
                   "exception_list", "component", "component_forward_decl", 
                   "component_decl", "component_header", "supported_interface_spec", 
                   "component_inheritance_spec", "component_body", "component_export", 
                   "provides_decl", "interface_type", "uses_decl", "emits_decl", 
                   "publishes_decl", "consumes_decl", "home_decl", "home_header", 
                   "home_inheritance_spec", "primary_key_spec", "home_body", 
                   "home_export", "factory_decl", "finder_decl", "event", 
                   "event_forward_decl", "event_abs_decl", "event_decl", 
                   "event_header" ]

    EOF = Token.EOF
    INTEGER_LITERAL=1
    OCTAL_LITERAL=2
    HEX_LITERAL=3
    FLOATING_PT_LITERAL=4
    FIXED_PT_LITERAL=5
    WIDE_CHARACTER_LITERAL=6
    CHARACTER_LITERAL=7
    WIDE_STRING_LITERAL=8
    STRING_LITERAL=9
    BOOLEAN_LITERAL=10
    SEMICOLON=11
    COLON=12
    COMA=13
    LEFT_BRACE=14
    RIGHT_BRACE=15
    LEFT_BRACKET=16
    RIGHT_BRACKET=17
    LEFT_SQUARE_BRACKET=18
    RIGHT_SQUARE_BRACKET=19
    TILDE=20
    SLASH=21
    LEFT_ANG_BRACKET=22
    RIGHT_ANG_BRACKET=23
    STAR=24
    PLUS=25
    MINUS=26
    CARET=27
    AMPERSAND=28
    PIPE=29
    EQUAL=30
    PERCENT=31
    AT=32
    DOUBLE_COLON=33
    RIGHT_SHIFT=34
    LEFT_SHIFT=35
    KW_SETRAISES=36
    KW_OUT=37
    KW_EMITS=38
    KW_STRING=39
    KW_SWITCH=40
    KW_PUBLISHES=41
    KW_TYPEDEF=42
    KW_USES=43
    KW_PRIMARYKEY=44
    KW_CUSTOM=45
    KW_OCTET=46
    KW_SEQUENCE=47
    KW_IMPORT=48
    KW_STRUCT=49
    KW_NATIVE=50
    KW_READONLY=51
    KW_FINDER=52
    KW_RAISES=53
    KW_VOID=54
    KW_PRIVATE=55
    KW_EVENTTYPE=56
    KW_WCHAR=57
    KW_IN=58
    KW_DEFAULT=59
    KW_PUBLIC=60
    KW_SHORT=61
    KW_LONG=62
    KW_ENUM=63
    KW_WSTRING=64
    KW_CONTEXT=65
    KW_HOME=66
    KW_FACTORY=67
    KW_EXCEPTION=68
    KW_GETRAISES=69
    KW_CONST=70
    KW_VALUEBASE=71
    KW_VALUETYPE=72
    KW_SUPPORTS=73
    KW_MODULE=74
    KW_OBJECT=75
    KW_TRUNCATABLE=76
    KW_UNSIGNED=77
    KW_FIXED=78
    KW_UNION=79
    KW_ONEWAY=80
    KW_ANY=81
    KW_CHAR=82
    KW_CASE=83
    KW_INT8=84
    KW_INT16=85
    KW_INT32=86
    KW_INT64=87
    KW_UINT8=88
    KW_UINT16=89
    KW_UINT32=90
    KW_UINT64=91
    KW_FLOAT=92
    KW_BOOLEAN=93
    KW_MULTIPLE=94
    KW_ABSTRACT=95
    KW_INOUT=96
    KW_PROVIDES=97
    KW_CONSUMES=98
    KW_DOUBLE=99
    KW_TYPEPREFIX=100
    KW_TYPEID=101
    KW_ATTRIBUTE=102
    KW_LOCAL=103
    KW_MANAGES=104
    KW_INTERFACE=105
    KW_COMPONENT=106
    ID=107
    WS=108
    COMMENT=109
    LINE_COMMENT=110
    NEWLINE=111

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Import_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Import_declContext,i)


        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(IDLParser.DefinitionContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecification" ):
                listener.enterSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecification" ):
                listener.exitSpecification(self)




    def specification(self):

        localctx = IDLParser.SpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.KW_IMPORT:
                self.state = 258
                self.import_decl()
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 264
                self.definition()
                self.state = 267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.AT) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_CUSTOM) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (IDLParser.KW_CONST - 70)) | (1 << (IDLParser.KW_VALUETYPE - 70)) | (1 << (IDLParser.KW_MODULE - 70)) | (1 << (IDLParser.KW_UNION - 70)) | (1 << (IDLParser.KW_ABSTRACT - 70)) | (1 << (IDLParser.KW_TYPEPREFIX - 70)) | (1 << (IDLParser.KW_TYPEID - 70)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedef_type(self):
            return self.getTypedRuleContext(IDLParser.Typedef_typeContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def struct_type(self):
            return self.getTypedRuleContext(IDLParser.Struct_typeContext,0)


        def union_type(self):
            return self.getTypedRuleContext(IDLParser.Union_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def constr_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Constr_forward_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(IDLParser.Const_declContext,0)


        def module(self):
            return self.getTypedRuleContext(IDLParser.ModuleContext,0)


        def value(self):
            return self.getTypedRuleContext(IDLParser.ValueContext,0)


        def type_id_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_id_declContext,0)


        def type_prefix_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_prefix_declContext,0)


        def annotation(self):
            return self.getTypedRuleContext(IDLParser.AnnotationContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinition" ):
                listener.enterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinition" ):
                listener.exitDefinition(self)




    def definition(self):

        localctx = IDLParser.DefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_definition)
        try:
            self.state = 300
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.typedef_type()
                self.state = 270
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                self.struct_type()
                self.state = 273
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 275
                self.union_type()
                self.state = 276
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self.enum_type()
                self.state = 279
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 281
                self.constr_forward_decl()
                self.state = 282
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 284
                self.const_decl()
                self.state = 285
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 287
                self.module()
                self.state = 288
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 290
                self.value()
                self.state = 291
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 293
                self.type_id_decl()
                self.state = 294
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 296
                self.type_prefix_decl()
                self.state = 297
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 299
                self.annotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_MODULE(self):
            return self.getToken(IDLParser.KW_MODULE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.DefinitionContext)
            else:
                return self.getTypedRuleContext(IDLParser.DefinitionContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)




    def module(self):

        localctx = IDLParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302
            self.match(IDLParser.KW_MODULE)
            self.state = 303
            self.simple_declarator()
            self.state = 304
            self.match(IDLParser.LEFT_BRACE)
            self.state = 306 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 305
                self.definition()
                self.state = 308 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.AT) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_CUSTOM) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (IDLParser.KW_CONST - 70)) | (1 << (IDLParser.KW_VALUETYPE - 70)) | (1 << (IDLParser.KW_MODULE - 70)) | (1 << (IDLParser.KW_UNION - 70)) | (1 << (IDLParser.KW_ABSTRACT - 70)) | (1 << (IDLParser.KW_TYPEPREFIX - 70)) | (1 << (IDLParser.KW_TYPEID - 70)))) != 0)):
                    break

            self.state = 310
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_or_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_decl(self):
            return self.getTypedRuleContext(IDLParser.Interface_declContext,0)


        def forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_interface_or_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_or_forward_decl" ):
                listener.enterInterface_or_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_or_forward_decl" ):
                listener.exitInterface_or_forward_decl(self)




    def interface_or_forward_decl(self):

        localctx = IDLParser.Interface_or_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_interface_or_forward_decl)
        try:
            self.state = 314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.interface_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_header(self):
            return self.getTypedRuleContext(IDLParser.Interface_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def interface_body(self):
            return self.getTypedRuleContext(IDLParser.Interface_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_decl" ):
                listener.enterInterface_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_decl" ):
                listener.exitInterface_decl(self)




    def interface_decl(self):

        localctx = IDLParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interface_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.interface_header()
            self.state = 317
            self.match(IDLParser.LEFT_BRACE)
            self.state = 318
            self.interface_body()
            self.state = 319
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INTERFACE(self):
            return self.getToken(IDLParser.KW_INTERFACE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_LOCAL(self):
            return self.getToken(IDLParser.KW_LOCAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForward_decl" ):
                listener.enterForward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForward_decl" ):
                listener.exitForward_decl(self)




    def forward_decl(self):

        localctx = IDLParser.Forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_forward_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_ABSTRACT or _la==IDLParser.KW_LOCAL:
                self.state = 321
                _la = self._input.LA(1)
                if not(_la==IDLParser.KW_ABSTRACT or _la==IDLParser.KW_LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 324
            self.match(IDLParser.KW_INTERFACE)
            self.state = 325
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_INTERFACE(self):
            return self.getToken(IDLParser.KW_INTERFACE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def interface_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Interface_inheritance_specContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_LOCAL(self):
            return self.getToken(IDLParser.KW_LOCAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_header" ):
                listener.enterInterface_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_header" ):
                listener.exitInterface_header(self)




    def interface_header(self):

        localctx = IDLParser.Interface_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_interface_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_ABSTRACT or _la==IDLParser.KW_LOCAL:
                self.state = 327
                _la = self._input.LA(1)
                if not(_la==IDLParser.KW_ABSTRACT or _la==IDLParser.KW_LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 330
            self.match(IDLParser.KW_INTERFACE)
            self.state = 331
            self.simple_declarator()
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.COLON:
                self.state = 332
                self.interface_inheritance_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(IDLParser.AT, 0)

        def simple_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = IDLParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_annotation)
        try:
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.match(IDLParser.AT)
                self.state = 336
                self.simple_declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.match(IDLParser.AT)
                self.state = 338
                self.simple_declarator()
                self.state = 339
                self.simple_declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.ExportContext)
            else:
                return self.getTypedRuleContext(IDLParser.ExportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_interface_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_body" ):
                listener.enterInterface_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_body" ):
                listener.exitInterface_body(self)




    def interface_body(self):

        localctx = IDLParser.Interface_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interface_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_READONLY) | (1 << IDLParser.KW_VOID) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 343
                self.export()
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedef_type(self):
            return self.getTypedRuleContext(IDLParser.Typedef_typeContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def struct_type(self):
            return self.getTypedRuleContext(IDLParser.Struct_typeContext,0)


        def union_type(self):
            return self.getTypedRuleContext(IDLParser.Union_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def constr_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Constr_forward_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(IDLParser.Const_declContext,0)


        def except_decl(self):
            return self.getTypedRuleContext(IDLParser.Except_declContext,0)


        def attr_decl(self):
            return self.getTypedRuleContext(IDLParser.Attr_declContext,0)


        def op_decl(self):
            return self.getTypedRuleContext(IDLParser.Op_declContext,0)


        def type_id_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_id_declContext,0)


        def type_prefix_decl(self):
            return self.getTypedRuleContext(IDLParser.Type_prefix_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_export

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExport" ):
                listener.enterExport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExport" ):
                listener.exitExport(self)




    def export(self):

        localctx = IDLParser.ExportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_export)
        try:
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.typedef_type()
                self.state = 350
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 352
                self.struct_type()
                self.state = 353
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 355
                self.union_type()
                self.state = 356
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 358
                self.enum_type()
                self.state = 359
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                self.constr_forward_decl()
                self.state = 362
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 364
                self.const_decl()
                self.state = 365
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 367
                self.except_decl()
                self.state = 368
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 370
                self.attr_decl()
                self.state = 371
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 373
                self.op_decl()
                self.state = 374
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 376
                self.type_id_decl()
                self.state = 377
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 379
                self.type_prefix_decl()
                self.state = 380
                self.match(IDLParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def interface_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Interface_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Interface_nameContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_inheritance_spec" ):
                listener.enterInterface_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_inheritance_spec" ):
                listener.exitInterface_inheritance_spec(self)




    def interface_inheritance_spec(self):

        localctx = IDLParser.Interface_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interface_inheritance_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(IDLParser.COLON)
            self.state = 385
            self.interface_name()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 386
                self.match(IDLParser.COMA)
                self.state = 387
                self.interface_name()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_interface_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_name" ):
                listener.enterInterface_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_name" ):
                listener.exitInterface_name(self)




    def interface_name(self):

        localctx = IDLParser.Interface_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interface_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scoped_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,i)


        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.DOUBLE_COLON)
            else:
                return self.getToken(IDLParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return IDLParser.RULE_scoped_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScoped_name" ):
                listener.enterScoped_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScoped_name" ):
                listener.exitScoped_name(self)




    def scoped_name(self):

        localctx = IDLParser.Scoped_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_scoped_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.DOUBLE_COLON:
                self.state = 395
                self.match(IDLParser.DOUBLE_COLON)


            self.state = 398
            self.simple_declarator()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.DOUBLE_COLON:
                self.state = 399
                self.match(IDLParser.DOUBLE_COLON)
                self.state = 400
                self.simple_declarator()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_declContext,0)


        def value_abs_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_abs_declContext,0)


        def value_box_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_box_declContext,0)


        def value_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Value_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = IDLParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 406
                self.value_decl()
                pass

            elif la_ == 2:
                self.state = 407
                self.value_abs_decl()
                pass

            elif la_ == 3:
                self.state = 408
                self.value_box_decl()
                pass

            elif la_ == 4:
                self.state = 409
                self.value_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_value_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_forward_decl" ):
                listener.enterValue_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_forward_decl" ):
                listener.exitValue_forward_decl(self)




    def value_forward_decl(self):

        localctx = IDLParser.Value_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_value_forward_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_ABSTRACT:
                self.state = 412
                self.match(IDLParser.KW_ABSTRACT)


            self.state = 415
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 416
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_box_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value_box_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_box_decl" ):
                listener.enterValue_box_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_box_decl" ):
                listener.exitValue_box_decl(self)




    def value_box_decl(self):

        localctx = IDLParser.Value_box_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_value_box_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 419
            self.simple_declarator()
            self.state = 420
            self.type_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_abs_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.ExportContext)
            else:
                return self.getTypedRuleContext(IDLParser.ExportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_value_abs_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_abs_decl" ):
                listener.enterValue_abs_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_abs_decl" ):
                listener.exitValue_abs_decl(self)




    def value_abs_decl(self):

        localctx = IDLParser.Value_abs_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_value_abs_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(IDLParser.KW_ABSTRACT)
            self.state = 423
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 424
            self.simple_declarator()
            self.state = 425
            self.value_inheritance_spec()
            self.state = 426
            self.match(IDLParser.LEFT_BRACE)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_READONLY) | (1 << IDLParser.KW_VOID) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 427
                self.export()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_header(self):
            return self.getTypedRuleContext(IDLParser.Value_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def value_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Value_elementContext)
            else:
                return self.getTypedRuleContext(IDLParser.Value_elementContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_value_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_decl" ):
                listener.enterValue_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_decl" ):
                listener.exitValue_decl(self)




    def value_decl(self):

        localctx = IDLParser.Value_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_value_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.value_header()
            self.state = 436
            self.match(IDLParser.LEFT_BRACE)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_READONLY) | (1 << IDLParser.KW_VOID) | (1 << IDLParser.KW_PRIVATE) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_PUBLIC) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_FACTORY - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 437
                self.value_element()
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 443
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUETYPE(self):
            return self.getToken(IDLParser.KW_VALUETYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def KW_CUSTOM(self):
            return self.getToken(IDLParser.KW_CUSTOM, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_value_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_header" ):
                listener.enterValue_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_header" ):
                listener.exitValue_header(self)




    def value_header(self):

        localctx = IDLParser.Value_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_value_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_CUSTOM:
                self.state = 445
                self.match(IDLParser.KW_CUSTOM)


            self.state = 448
            self.match(IDLParser.KW_VALUETYPE)
            self.state = 449
            self.simple_declarator()
            self.state = 450
            self.value_inheritance_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def value_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Value_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Value_nameContext,i)


        def KW_SUPPORTS(self):
            return self.getToken(IDLParser.KW_SUPPORTS, 0)

        def interface_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Interface_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Interface_nameContext,i)


        def KW_TRUNCATABLE(self):
            return self.getToken(IDLParser.KW_TRUNCATABLE, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_value_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_inheritance_spec" ):
                listener.enterValue_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_inheritance_spec" ):
                listener.exitValue_inheritance_spec(self)




    def value_inheritance_spec(self):

        localctx = IDLParser.Value_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_value_inheritance_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.COLON:
                self.state = 452
                self.match(IDLParser.COLON)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==IDLParser.KW_TRUNCATABLE:
                    self.state = 453
                    self.match(IDLParser.KW_TRUNCATABLE)


                self.state = 456
                self.value_name()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==IDLParser.COMA:
                    self.state = 457
                    self.match(IDLParser.COMA)
                    self.state = 458
                    self.value_name()
                    self.state = 463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_SUPPORTS:
                self.state = 466
                self.match(IDLParser.KW_SUPPORTS)
                self.state = 467
                self.interface_name()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==IDLParser.COMA:
                    self.state = 468
                    self.match(IDLParser.COMA)
                    self.state = 469
                    self.interface_name()
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_name" ):
                listener.enterValue_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_name" ):
                listener.exitValue_name(self)




    def value_name(self):

        localctx = IDLParser.Value_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_value_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export(self):
            return self.getTypedRuleContext(IDLParser.ExportContext,0)


        def state_member(self):
            return self.getTypedRuleContext(IDLParser.State_memberContext,0)


        def init_decl(self):
            return self.getTypedRuleContext(IDLParser.Init_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_value_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_element" ):
                listener.enterValue_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_element" ):
                listener.exitValue_element(self)




    def value_element(self):

        localctx = IDLParser.Value_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_value_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.KW_STRING, IDLParser.KW_TYPEDEF, IDLParser.KW_OCTET, IDLParser.KW_STRUCT, IDLParser.KW_READONLY, IDLParser.KW_VOID, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_ENUM, IDLParser.KW_WSTRING, IDLParser.KW_EXCEPTION, IDLParser.KW_CONST, IDLParser.KW_UNSIGNED, IDLParser.KW_UNION, IDLParser.KW_ONEWAY, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE, IDLParser.KW_TYPEPREFIX, IDLParser.KW_TYPEID, IDLParser.KW_ATTRIBUTE, IDLParser.ID]:
                self.state = 479
                self.export()
                pass
            elif token in [IDLParser.KW_PRIVATE, IDLParser.KW_PUBLIC]:
                self.state = 480
                self.state_member()
                pass
            elif token in [IDLParser.KW_FACTORY]:
                self.state = 481
                self.init_decl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class State_memberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarators(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def KW_PUBLIC(self):
            return self.getToken(IDLParser.KW_PUBLIC, 0)

        def KW_PRIVATE(self):
            return self.getToken(IDLParser.KW_PRIVATE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_state_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterState_member" ):
                listener.enterState_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitState_member" ):
                listener.exitState_member(self)




    def state_member(self):

        localctx = IDLParser.State_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_state_member)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            _la = self._input.LA(1)
            if not(_la==IDLParser.KW_PRIVATE or _la==IDLParser.KW_PUBLIC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 485
            self.type_spec()
            self.state = 486
            self.declarators()
            self.state = 487
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FACTORY(self):
            return self.getToken(IDLParser.KW_FACTORY, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def init_param_decls(self):
            return self.getTypedRuleContext(IDLParser.Init_param_declsContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_init_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_decl" ):
                listener.enterInit_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_decl" ):
                listener.exitInit_decl(self)




    def init_decl(self):

        localctx = IDLParser.Init_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_init_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(IDLParser.KW_FACTORY)
            self.state = 490
            self.simple_declarator()
            self.state = 491
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_IN:
                self.state = 492
                self.init_param_decls()


            self.state = 495
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_RAISES:
                self.state = 496
                self.raises_expr()


            self.state = 499
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_param_declsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def init_param_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Init_param_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Init_param_declContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_init_param_decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_param_decls" ):
                listener.enterInit_param_decls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_param_decls" ):
                listener.exitInit_param_decls(self)




    def init_param_decls(self):

        localctx = IDLParser.Init_param_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_init_param_decls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.init_param_decl()
            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 502
                self.match(IDLParser.COMA)
                self.state = 503
                self.init_param_decl()
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def init_param_attribute(self):
            return self.getTypedRuleContext(IDLParser.Init_param_attributeContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_init_param_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_param_decl" ):
                listener.enterInit_param_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_param_decl" ):
                listener.exitInit_param_decl(self)




    def init_param_decl(self):

        localctx = IDLParser.Init_param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_init_param_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.init_param_attribute()
            self.state = 510
            self.param_type_spec()
            self.state = 511
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Init_param_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IN(self):
            return self.getToken(IDLParser.KW_IN, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_init_param_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit_param_attribute" ):
                listener.enterInit_param_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit_param_attribute" ):
                listener.exitInit_param_attribute(self)




    def init_param_attribute(self):

        localctx = IDLParser.Init_param_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_init_param_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(IDLParser.KW_IN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONST(self):
            return self.getToken(IDLParser.KW_CONST, 0)

        def const_type(self):
            return self.getTypedRuleContext(IDLParser.Const_typeContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def EQUAL(self):
            return self.getToken(IDLParser.EQUAL, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_const_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_decl" ):
                listener.enterConst_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_decl" ):
                listener.exitConst_decl(self)




    def const_decl(self):

        localctx = IDLParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_const_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(IDLParser.KW_CONST)
            self.state = 516
            self.const_type()
            self.state = 517
            self.simple_declarator()
            self.state = 518
            self.match(IDLParser.EQUAL)
            self.state = 519
            self.const_exp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Primitive_type_specContext,0)


        def string_type(self):
            return self.getTypedRuleContext(IDLParser.String_typeContext,0)


        def wide_string_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_string_typeContext,0)


        def fixed_pt_const_type(self):
            return self.getTypedRuleContext(IDLParser.Fixed_pt_const_typeContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_const_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_type" ):
                listener.enterConst_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_type" ):
                listener.exitConst_type(self)




    def const_type(self):

        localctx = IDLParser.Const_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_const_type)
        try:
            self.state = 526
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_OCTET, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_UNSIGNED, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.primitive_type_spec()
                pass
            elif token in [IDLParser.KW_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.string_type()
                pass
            elif token in [IDLParser.KW_WSTRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 523
                self.wide_string_type()
                pass
            elif token in [IDLParser.KW_FIXED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 524
                self.fixed_pt_const_type()
                pass
            elif token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 525
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_expContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self):
            return self.getTypedRuleContext(IDLParser.Unary_exprContext,0)


        def or_expr(self):
            return self.getTypedRuleContext(IDLParser.Or_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_const_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_exp" ):
                listener.enterConst_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_exp" ):
                listener.exitConst_exp(self)




    def const_exp(self):

        localctx = IDLParser.Const_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_const_exp)
        try:
            self.state = 530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.unary_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.or_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Xor_exprContext,i)


        def PIPE(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.PIPE)
            else:
                return self.getToken(IDLParser.PIPE, i)

        def getRuleIndex(self):
            return IDLParser.RULE_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_expr" ):
                listener.enterOr_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_expr" ):
                listener.exitOr_expr(self)




    def or_expr(self):

        localctx = IDLParser.Or_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_or_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.xor_expr()
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.PIPE:
                self.state = 533
                self.match(IDLParser.PIPE)
                self.state = 534
                self.xor_expr()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.And_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.And_exprContext,i)


        def CARET(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.CARET)
            else:
                return self.getToken(IDLParser.CARET, i)

        def getRuleIndex(self):
            return IDLParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)




    def xor_expr(self):

        localctx = IDLParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.and_expr()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.CARET:
                self.state = 541
                self.match(IDLParser.CARET)
                self.state = 542
                self.and_expr()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Shift_exprContext,i)


        def AMPERSAND(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.AMPERSAND)
            else:
                return self.getToken(IDLParser.AMPERSAND, i)

        def getRuleIndex(self):
            return IDLParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)




    def and_expr(self):

        localctx = IDLParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.shift_expr()
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.AMPERSAND:
                self.state = 549
                self.match(IDLParser.AMPERSAND)
                self.state = 550
                self.shift_expr()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def add_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Add_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Add_exprContext,i)


        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.RIGHT_SHIFT)
            else:
                return self.getToken(IDLParser.RIGHT_SHIFT, i)

        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.LEFT_SHIFT)
            else:
                return self.getToken(IDLParser.LEFT_SHIFT, i)

        def getRuleIndex(self):
            return IDLParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)




    def shift_expr(self):

        localctx = IDLParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.add_expr()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.RIGHT_SHIFT or _la==IDLParser.LEFT_SHIFT:
                self.state = 557
                _la = self._input.LA(1)
                if not(_la==IDLParser.RIGHT_SHIFT or _la==IDLParser.LEFT_SHIFT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 558
                self.add_expr()
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mult_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Mult_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Mult_exprContext,i)


        def PLUS(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.PLUS)
            else:
                return self.getToken(IDLParser.PLUS, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.MINUS)
            else:
                return self.getToken(IDLParser.MINUS, i)

        def getRuleIndex(self):
            return IDLParser.RULE_add_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_expr" ):
                listener.enterAdd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_expr" ):
                listener.exitAdd_expr(self)




    def add_expr(self):

        localctx = IDLParser.Add_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_add_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.mult_expr()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.PLUS or _la==IDLParser.MINUS:
                self.state = 565
                _la = self._input.LA(1)
                if not(_la==IDLParser.PLUS or _la==IDLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 566
                self.mult_expr()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mult_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Unary_exprContext)
            else:
                return self.getTypedRuleContext(IDLParser.Unary_exprContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.STAR)
            else:
                return self.getToken(IDLParser.STAR, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.SLASH)
            else:
                return self.getToken(IDLParser.SLASH, i)

        def PERCENT(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.PERCENT)
            else:
                return self.getToken(IDLParser.PERCENT, i)

        def getRuleIndex(self):
            return IDLParser.RULE_mult_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMult_expr" ):
                listener.enterMult_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMult_expr" ):
                listener.exitMult_expr(self)




    def mult_expr(self):

        localctx = IDLParser.Mult_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_mult_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.unary_expr()
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.SLASH) | (1 << IDLParser.STAR) | (1 << IDLParser.PERCENT))) != 0):
                self.state = 573
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.SLASH) | (1 << IDLParser.STAR) | (1 << IDLParser.PERCENT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 574
                self.unary_expr()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_operator(self):
            return self.getTypedRuleContext(IDLParser.Unary_operatorContext,0)


        def primary_expr(self):
            return self.getTypedRuleContext(IDLParser.Primary_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_unary_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_expr" ):
                listener.enterUnary_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_expr" ):
                listener.exitUnary_expr(self)




    def unary_expr(self):

        localctx = IDLParser.Unary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unary_expr)
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.TILDE, IDLParser.PLUS, IDLParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                self.unary_operator()
                self.state = 581
                self.primary_expr()
                pass
            elif token in [IDLParser.INTEGER_LITERAL, IDLParser.HEX_LITERAL, IDLParser.FLOATING_PT_LITERAL, IDLParser.FIXED_PT_LITERAL, IDLParser.WIDE_CHARACTER_LITERAL, IDLParser.CHARACTER_LITERAL, IDLParser.WIDE_STRING_LITERAL, IDLParser.STRING_LITERAL, IDLParser.BOOLEAN_LITERAL, IDLParser.LEFT_BRACKET, IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.primary_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(IDLParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(IDLParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(IDLParser.TILDE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = IDLParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.TILDE) | (1 << IDLParser.PLUS) | (1 << IDLParser.MINUS))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(IDLParser.LiteralContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_primary_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expr" ):
                listener.enterPrimary_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expr" ):
                listener.exitPrimary_expr(self)




    def primary_expr(self):

        localctx = IDLParser.Primary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_primary_expr)
        try:
            self.state = 594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 588
                self.scoped_name()
                pass
            elif token in [IDLParser.INTEGER_LITERAL, IDLParser.HEX_LITERAL, IDLParser.FLOATING_PT_LITERAL, IDLParser.FIXED_PT_LITERAL, IDLParser.WIDE_CHARACTER_LITERAL, IDLParser.CHARACTER_LITERAL, IDLParser.WIDE_STRING_LITERAL, IDLParser.STRING_LITERAL, IDLParser.BOOLEAN_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                self.literal()
                pass
            elif token in [IDLParser.LEFT_BRACKET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.match(IDLParser.LEFT_BRACKET)
                self.state = 591
                self.const_exp()
                self.state = 592
                self.match(IDLParser.RIGHT_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_LITERAL(self):
            return self.getToken(IDLParser.HEX_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(IDLParser.INTEGER_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def WIDE_STRING_LITERAL(self):
            return self.getToken(IDLParser.WIDE_STRING_LITERAL, 0)

        def CHARACTER_LITERAL(self):
            return self.getToken(IDLParser.CHARACTER_LITERAL, 0)

        def WIDE_CHARACTER_LITERAL(self):
            return self.getToken(IDLParser.WIDE_CHARACTER_LITERAL, 0)

        def FIXED_PT_LITERAL(self):
            return self.getToken(IDLParser.FIXED_PT_LITERAL, 0)

        def FLOATING_PT_LITERAL(self):
            return self.getToken(IDLParser.FLOATING_PT_LITERAL, 0)

        def BOOLEAN_LITERAL(self):
            return self.getToken(IDLParser.BOOLEAN_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = IDLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.INTEGER_LITERAL) | (1 << IDLParser.HEX_LITERAL) | (1 << IDLParser.FLOATING_PT_LITERAL) | (1 << IDLParser.FIXED_PT_LITERAL) | (1 << IDLParser.WIDE_CHARACTER_LITERAL) | (1 << IDLParser.CHARACTER_LITERAL) | (1 << IDLParser.WIDE_STRING_LITERAL) | (1 << IDLParser.STRING_LITERAL) | (1 << IDLParser.BOOLEAN_LITERAL))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positive_int_constContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_positive_int_const

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositive_int_const" ):
                listener.enterPositive_int_const(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositive_int_const" ):
                listener.exitPositive_int_const(self)




    def positive_int_const(self):

        localctx = IDLParser.Positive_int_constContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_positive_int_const)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.const_exp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Typedef_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPEDEF(self):
            return self.getToken(IDLParser.KW_TYPEDEF, 0)

        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarators(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorsContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_typedef_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedef_type" ):
                listener.enterTypedef_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedef_type" ):
                listener.exitTypedef_type(self)




    def typedef_type(self):

        localctx = IDLParser.Typedef_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_typedef_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(IDLParser.KW_TYPEDEF)
            self.state = 601
            self.type_spec()
            self.state = 602
            self.declarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Simple_type_specContext,0)


        def constr_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Constr_type_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_spec" ):
                listener.enterType_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_spec" ):
                listener.exitType_spec(self)




    def type_spec(self):

        localctx = IDLParser.Type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_type_spec)
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.KW_STRING, IDLParser.KW_OCTET, IDLParser.KW_SEQUENCE, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_WSTRING, IDLParser.KW_UNSIGNED, IDLParser.KW_FIXED, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE, IDLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.simple_type_spec()
                pass
            elif token in [IDLParser.KW_STRUCT, IDLParser.KW_ENUM, IDLParser.KW_UNION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.constr_type_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Primitive_type_specContext,0)


        def template_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Template_type_specContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_simple_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_type_spec" ):
                listener.enterSimple_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_type_spec" ):
                listener.exitSimple_type_spec(self)




    def simple_type_spec(self):

        localctx = IDLParser.Simple_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_simple_type_spec)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_OCTET, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_UNSIGNED, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.primitive_type_spec()
                pass
            elif token in [IDLParser.KW_STRING, IDLParser.KW_SEQUENCE, IDLParser.KW_WSTRING, IDLParser.KW_FIXED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.template_type_spec()
                pass
            elif token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primitive_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floating_pt_type(self):
            return self.getTypedRuleContext(IDLParser.Floating_pt_typeContext,0)


        def integer_type(self):
            return self.getTypedRuleContext(IDLParser.Integer_typeContext,0)


        def char_type(self):
            return self.getTypedRuleContext(IDLParser.Char_typeContext,0)


        def wide_char_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_char_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(IDLParser.Boolean_typeContext,0)


        def octet_type(self):
            return self.getTypedRuleContext(IDLParser.Octet_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_primitive_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_type_spec" ):
                listener.enterPrimitive_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_type_spec" ):
                listener.exitPrimitive_type_spec(self)




    def primitive_type_spec(self):

        localctx = IDLParser.Primitive_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_primitive_type_spec)
        try:
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.floating_pt_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.integer_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 615
                self.char_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 616
                self.wide_char_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 617
                self.boolean_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 618
                self.octet_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Template_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sequence_type(self):
            return self.getTypedRuleContext(IDLParser.Sequence_typeContext,0)


        def string_type(self):
            return self.getTypedRuleContext(IDLParser.String_typeContext,0)


        def wide_string_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_string_typeContext,0)


        def fixed_pt_type(self):
            return self.getTypedRuleContext(IDLParser.Fixed_pt_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_template_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplate_type_spec" ):
                listener.enterTemplate_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplate_type_spec" ):
                listener.exitTemplate_type_spec(self)




    def template_type_spec(self):

        localctx = IDLParser.Template_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_template_type_spec)
        try:
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_SEQUENCE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.sequence_type()
                pass
            elif token in [IDLParser.KW_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.string_type()
                pass
            elif token in [IDLParser.KW_WSTRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 623
                self.wide_string_type()
                pass
            elif token in [IDLParser.KW_FIXED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 624
                self.fixed_pt_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constr_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_type(self):
            return self.getTypedRuleContext(IDLParser.Struct_typeContext,0)


        def union_type(self):
            return self.getTypedRuleContext(IDLParser.Union_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_constr_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstr_type_spec" ):
                listener.enterConstr_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstr_type_spec" ):
                listener.exitConstr_type_spec(self)




    def constr_type_spec(self):

        localctx = IDLParser.Constr_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_constr_type_spec)
        try:
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_STRUCT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.struct_type()
                pass
            elif token in [IDLParser.KW_UNION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.union_type()
                pass
            elif token in [IDLParser.KW_ENUM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 629
                self.enum_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.DeclaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.DeclaratorContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_declarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarators" ):
                listener.enterDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarators" ):
                listener.exitDeclarators(self)




    def declarators(self):

        localctx = IDLParser.DeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_declarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.declarator()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 633
                self.match(IDLParser.COMA)
                self.state = 634
                self.declarator()
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def array_declarator(self):
            return self.getTypedRuleContext(IDLParser.Array_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = IDLParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_declarator)
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.simple_declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.array_declarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(IDLParser.ID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_simple_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_declarator" ):
                listener.enterSimple_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_declarator" ):
                listener.exitSimple_declarator(self)




    def simple_declarator(self):

        localctx = IDLParser.Simple_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simple_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(IDLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Floating_pt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FLOAT(self):
            return self.getToken(IDLParser.KW_FLOAT, 0)

        def KW_DOUBLE(self):
            return self.getToken(IDLParser.KW_DOUBLE, 0)

        def KW_LONG(self):
            return self.getToken(IDLParser.KW_LONG, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_floating_pt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloating_pt_type" ):
                listener.enterFloating_pt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloating_pt_type" ):
                listener.exitFloating_pt_type(self)




    def floating_pt_type(self):

        localctx = IDLParser.Floating_pt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_floating_pt_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_FLOAT]:
                self.state = 646
                self.match(IDLParser.KW_FLOAT)
                pass
            elif token in [IDLParser.KW_DOUBLE]:
                self.state = 647
                self.match(IDLParser.KW_DOUBLE)
                pass
            elif token in [IDLParser.KW_LONG]:
                self.state = 648
                self.match(IDLParser.KW_LONG)
                self.state = 649
                self.match(IDLParser.KW_DOUBLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SHORT(self):
            return self.getToken(IDLParser.KW_SHORT, 0)

        def KW_LONG(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.KW_LONG)
            else:
                return self.getToken(IDLParser.KW_LONG, i)

        def KW_UNSIGNED(self):
            return self.getToken(IDLParser.KW_UNSIGNED, 0)

        def KW_INT8(self):
            return self.getToken(IDLParser.KW_INT8, 0)

        def KW_INT16(self):
            return self.getToken(IDLParser.KW_INT16, 0)

        def KW_INT32(self):
            return self.getToken(IDLParser.KW_INT32, 0)

        def KW_INT64(self):
            return self.getToken(IDLParser.KW_INT64, 0)

        def KW_UINT8(self):
            return self.getToken(IDLParser.KW_UINT8, 0)

        def KW_UINT16(self):
            return self.getToken(IDLParser.KW_UINT16, 0)

        def KW_UINT32(self):
            return self.getToken(IDLParser.KW_UINT32, 0)

        def KW_UINT64(self):
            return self.getToken(IDLParser.KW_UINT64, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_integer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_type" ):
                listener.enterInteger_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_type" ):
                listener.exitInteger_type(self)




    def integer_type(self):

        localctx = IDLParser.Integer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_integer_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 652
                self.match(IDLParser.KW_SHORT)
                pass

            elif la_ == 2:
                self.state = 653
                self.match(IDLParser.KW_LONG)
                pass

            elif la_ == 3:
                self.state = 654
                self.match(IDLParser.KW_LONG)
                self.state = 655
                self.match(IDLParser.KW_LONG)
                pass

            elif la_ == 4:
                self.state = 656
                self.match(IDLParser.KW_UNSIGNED)
                self.state = 657
                self.match(IDLParser.KW_SHORT)
                pass

            elif la_ == 5:
                self.state = 658
                self.match(IDLParser.KW_UNSIGNED)
                self.state = 659
                self.match(IDLParser.KW_LONG)
                pass

            elif la_ == 6:
                self.state = 660
                self.match(IDLParser.KW_UNSIGNED)
                self.state = 661
                self.match(IDLParser.KW_LONG)
                self.state = 662
                self.match(IDLParser.KW_LONG)
                pass

            elif la_ == 7:
                self.state = 663
                self.match(IDLParser.KW_INT8)
                pass

            elif la_ == 8:
                self.state = 664
                self.match(IDLParser.KW_INT16)
                pass

            elif la_ == 9:
                self.state = 665
                self.match(IDLParser.KW_INT32)
                pass

            elif la_ == 10:
                self.state = 666
                self.match(IDLParser.KW_INT64)
                pass

            elif la_ == 11:
                self.state = 667
                self.match(IDLParser.KW_UINT8)
                pass

            elif la_ == 12:
                self.state = 668
                self.match(IDLParser.KW_UINT16)
                pass

            elif la_ == 13:
                self.state = 669
                self.match(IDLParser.KW_UINT32)
                pass

            elif la_ == 14:
                self.state = 670
                self.match(IDLParser.KW_UINT64)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CHAR(self):
            return self.getToken(IDLParser.KW_CHAR, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_char_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_type" ):
                listener.enterChar_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_type" ):
                listener.exitChar_type(self)




    def char_type(self):

        localctx = IDLParser.Char_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_char_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(IDLParser.KW_CHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wide_char_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WCHAR(self):
            return self.getToken(IDLParser.KW_WCHAR, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_wide_char_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWide_char_type" ):
                listener.enterWide_char_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWide_char_type" ):
                listener.exitWide_char_type(self)




    def wide_char_type(self):

        localctx = IDLParser.Wide_char_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_wide_char_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(IDLParser.KW_WCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_BOOLEAN(self):
            return self.getToken(IDLParser.KW_BOOLEAN, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_boolean_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_type" ):
                listener.enterBoolean_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_type" ):
                listener.exitBoolean_type(self)




    def boolean_type(self):

        localctx = IDLParser.Boolean_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_boolean_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(IDLParser.KW_BOOLEAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Octet_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OCTET(self):
            return self.getToken(IDLParser.KW_OCTET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_octet_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOctet_type" ):
                listener.enterOctet_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOctet_type" ):
                listener.exitOctet_type(self)




    def octet_type(self):

        localctx = IDLParser.Octet_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_octet_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(IDLParser.KW_OCTET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ANY(self):
            return self.getToken(IDLParser.KW_ANY, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_any_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_type" ):
                listener.enterAny_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_type" ):
                listener.exitAny_type(self)




    def any_type(self):

        localctx = IDLParser.Any_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_any_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(IDLParser.KW_ANY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_OBJECT(self):
            return self.getToken(IDLParser.KW_OBJECT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_object_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_type" ):
                listener.enterObject_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_type" ):
                listener.exitObject_type(self)




    def object_type(self):

        localctx = IDLParser.Object_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_object_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(IDLParser.KW_OBJECT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(IDLParser.KW_STRUCT, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def member_list(self):
            return self.getTypedRuleContext(IDLParser.Member_listContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_struct_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_type" ):
                listener.enterStruct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_type" ):
                listener.exitStruct_type(self)




    def struct_type(self):

        localctx = IDLParser.Struct_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_struct_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(IDLParser.KW_STRUCT)
            self.state = 686
            self.simple_declarator()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.COLON:
                self.state = 687
                self.match(IDLParser.COLON)
                self.state = 688
                self.scoped_name()


            self.state = 691
            self.match(IDLParser.LEFT_BRACE)
            self.state = 692
            self.member_list()
            self.state = 693
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Member_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.MemberContext)
            else:
                return self.getTypedRuleContext(IDLParser.MemberContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_member_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember_list" ):
                listener.enterMember_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember_list" ):
                listener.exitMember_list(self)




    def member_list(self):

        localctx = IDLParser.Member_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_member_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 695
                self.member()
                self.state = 698 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.AT) | (1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_SEQUENCE) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_FIXED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.ID - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarators(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorsContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def annotation(self):
            return self.getTypedRuleContext(IDLParser.AnnotationContext,0)


        def NEWLINE(self):
            return self.getToken(IDLParser.NEWLINE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMember" ):
                listener.enterMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMember" ):
                listener.exitMember(self)




    def member(self):

        localctx = IDLParser.MemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_member)
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.type_spec()
                self.state = 701
                self.declarators()
                self.state = 702
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.annotation()
                self.state = 705
                self.type_spec()
                self.state = 706
                self.declarators()
                self.state = 707
                self.match(IDLParser.SEMICOLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 709
                self.annotation()
                self.state = 710
                self.match(IDLParser.NEWLINE)
                self.state = 711
                self.type_spec()
                self.state = 712
                self.declarators()
                self.state = 713
                self.match(IDLParser.SEMICOLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Union_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_UNION(self):
            return self.getToken(IDLParser.KW_UNION, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_SWITCH(self):
            return self.getToken(IDLParser.KW_SWITCH, 0)

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def switch_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Switch_type_specContext,0)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def switch_body(self):
            return self.getTypedRuleContext(IDLParser.Switch_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_union_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion_type" ):
                listener.enterUnion_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion_type" ):
                listener.exitUnion_type(self)




    def union_type(self):

        localctx = IDLParser.Union_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_union_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(IDLParser.KW_UNION)
            self.state = 718
            self.simple_declarator()
            self.state = 719
            self.match(IDLParser.KW_SWITCH)
            self.state = 720
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 721
            self.switch_type_spec()
            self.state = 722
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 723
            self.match(IDLParser.LEFT_BRACE)
            self.state = 724
            self.switch_body()
            self.state = 725
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_type(self):
            return self.getTypedRuleContext(IDLParser.Integer_typeContext,0)


        def char_type(self):
            return self.getTypedRuleContext(IDLParser.Char_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(IDLParser.Boolean_typeContext,0)


        def enum_type(self):
            return self.getTypedRuleContext(IDLParser.Enum_typeContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_switch_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_type_spec" ):
                listener.enterSwitch_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_type_spec" ):
                listener.exitSwitch_type_spec(self)




    def switch_type_spec(self):

        localctx = IDLParser.Switch_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_switch_type_spec)
        try:
            self.state = 732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_UNSIGNED, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.integer_type()
                pass
            elif token in [IDLParser.KW_CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.char_type()
                pass
            elif token in [IDLParser.KW_BOOLEAN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.boolean_type()
                pass
            elif token in [IDLParser.KW_ENUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 730
                self.enum_type()
                pass
            elif token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 731
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Case_stmtContext)
            else:
                return self.getTypedRuleContext(IDLParser.Case_stmtContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_switch_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_body" ):
                listener.enterSwitch_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_body" ):
                listener.exitSwitch_body(self)




    def switch_body(self):

        localctx = IDLParser.Switch_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_switch_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 734
                self.case_stmt()
                self.state = 737 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==IDLParser.KW_DEFAULT or _la==IDLParser.KW_CASE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element_spec(self):
            return self.getTypedRuleContext(IDLParser.Element_specContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def case_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Case_labelContext)
            else:
                return self.getTypedRuleContext(IDLParser.Case_labelContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_case_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_stmt" ):
                listener.enterCase_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_stmt" ):
                listener.exitCase_stmt(self)




    def case_stmt(self):

        localctx = IDLParser.Case_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_case_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 739
                self.case_label()
                self.state = 742 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==IDLParser.KW_DEFAULT or _la==IDLParser.KW_CASE):
                    break

            self.state = 744
            self.element_spec()
            self.state = 745
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_labelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CASE(self):
            return self.getToken(IDLParser.KW_CASE, 0)

        def const_exp(self):
            return self.getTypedRuleContext(IDLParser.Const_expContext,0)


        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def KW_DEFAULT(self):
            return self.getToken(IDLParser.KW_DEFAULT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_case_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_label" ):
                listener.enterCase_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_label" ):
                listener.exitCase_label(self)




    def case_label(self):

        localctx = IDLParser.Case_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_case_label)
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_CASE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(IDLParser.KW_CASE)
                self.state = 748
                self.const_exp()
                self.state = 749
                self.match(IDLParser.COLON)
                pass
            elif token in [IDLParser.KW_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.match(IDLParser.KW_DEFAULT)
                self.state = 752
                self.match(IDLParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_spec(self):
            return self.getTypedRuleContext(IDLParser.Type_specContext,0)


        def declarator(self):
            return self.getTypedRuleContext(IDLParser.DeclaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_spec" ):
                listener.enterElement_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_spec" ):
                listener.exitElement_spec(self)




    def element_spec(self):

        localctx = IDLParser.Element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_element_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.type_spec()
            self.state = 756
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ENUM(self):
            return self.getToken(IDLParser.KW_ENUM, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def enumerator_list(self):
            return self.getTypedRuleContext(IDLParser.Enumerator_listContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_enum_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_type" ):
                listener.enterEnum_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_type" ):
                listener.exitEnum_type(self)




    def enum_type(self):

        localctx = IDLParser.Enum_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_enum_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(IDLParser.KW_ENUM)
            self.state = 759
            self.simple_declarator()
            self.state = 760
            self.match(IDLParser.LEFT_BRACE)
            self.state = 761
            self.enumerator_list()
            self.state = 762
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumerator_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.EnumeratorContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_enumerator_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator_list" ):
                listener.enterEnumerator_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator_list" ):
                listener.exitEnumerator_list(self)




    def enumerator_list(self):

        localctx = IDLParser.Enumerator_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_enumerator_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.enumerator()
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 765
                self.match(IDLParser.COMA)
                self.state = 766
                self.enumerator()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def EQUAL(self):
            return self.getToken(IDLParser.EQUAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(IDLParser.INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = IDLParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_enumerator)
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.simple_declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.simple_declarator()
                self.state = 774
                self.match(IDLParser.EQUAL)
                self.state = 775
                self.match(IDLParser.INTEGER_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SEQUENCE(self):
            return self.getToken(IDLParser.KW_SEQUENCE, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def simple_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Simple_type_specContext,0)


        def COMA(self):
            return self.getToken(IDLParser.COMA, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_sequence_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_type" ):
                listener.enterSequence_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_type" ):
                listener.exitSequence_type(self)




    def sequence_type(self):

        localctx = IDLParser.Sequence_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_sequence_type)
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 779
                self.match(IDLParser.KW_SEQUENCE)
                self.state = 780
                self.match(IDLParser.LEFT_ANG_BRACKET)
                self.state = 781
                self.simple_type_spec()
                self.state = 782
                self.match(IDLParser.COMA)
                self.state = 783
                self.positive_int_const()
                self.state = 784
                self.match(IDLParser.RIGHT_ANG_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.match(IDLParser.KW_SEQUENCE)
                self.state = 787
                self.match(IDLParser.LEFT_ANG_BRACKET)
                self.state = 788
                self.simple_type_spec()
                self.state = 789
                self.match(IDLParser.RIGHT_ANG_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRING(self):
            return self.getToken(IDLParser.KW_STRING, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_string_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_type" ):
                listener.enterString_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_type" ):
                listener.exitString_type(self)




    def string_type(self):

        localctx = IDLParser.String_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_string_type)
        try:
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(IDLParser.KW_STRING)
                self.state = 794
                self.match(IDLParser.LEFT_ANG_BRACKET)
                self.state = 795
                self.positive_int_const()
                self.state = 796
                self.match(IDLParser.RIGHT_ANG_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.match(IDLParser.KW_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wide_string_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_WSTRING(self):
            return self.getToken(IDLParser.KW_WSTRING, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_wide_string_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWide_string_type" ):
                listener.enterWide_string_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWide_string_type" ):
                listener.exitWide_string_type(self)




    def wide_string_type(self):

        localctx = IDLParser.Wide_string_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_wide_string_type)
        try:
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 801
                self.match(IDLParser.KW_WSTRING)
                self.state = 802
                self.match(IDLParser.LEFT_ANG_BRACKET)
                self.state = 803
                self.positive_int_const()
                self.state = 804
                self.match(IDLParser.RIGHT_ANG_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.match(IDLParser.KW_WSTRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def fixed_array_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Fixed_array_sizeContext)
            else:
                return self.getTypedRuleContext(IDLParser.Fixed_array_sizeContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_array_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_declarator" ):
                listener.enterArray_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_declarator" ):
                listener.exitArray_declarator(self)




    def array_declarator(self):

        localctx = IDLParser.Array_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_array_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.simple_declarator()
            self.state = 811 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 810
                self.fixed_array_size()
                self.state = 813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==IDLParser.LEFT_SQUARE_BRACKET):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_array_sizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_SQUARE_BRACKET(self):
            return self.getToken(IDLParser.LEFT_SQUARE_BRACKET, 0)

        def positive_int_const(self):
            return self.getTypedRuleContext(IDLParser.Positive_int_constContext,0)


        def RIGHT_SQUARE_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_SQUARE_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_fixed_array_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_array_size" ):
                listener.enterFixed_array_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_array_size" ):
                listener.exitFixed_array_size(self)




    def fixed_array_size(self):

        localctx = IDLParser.Fixed_array_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_fixed_array_size)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(IDLParser.LEFT_SQUARE_BRACKET)
            self.state = 816
            self.positive_int_const()
            self.state = 817
            self.match(IDLParser.RIGHT_SQUARE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def readonly_attr_spec(self):
            return self.getTypedRuleContext(IDLParser.Readonly_attr_specContext,0)


        def attr_spec(self):
            return self.getTypedRuleContext(IDLParser.Attr_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_attr_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_decl" ):
                listener.enterAttr_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_decl" ):
                listener.exitAttr_decl(self)




    def attr_decl(self):

        localctx = IDLParser.Attr_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_attr_decl)
        try:
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_READONLY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.readonly_attr_spec()
                pass
            elif token in [IDLParser.KW_ATTRIBUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.attr_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EXCEPTION(self):
            return self.getToken(IDLParser.KW_EXCEPTION, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.MemberContext)
            else:
                return self.getTypedRuleContext(IDLParser.MemberContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_except_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_decl" ):
                listener.enterExcept_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_decl" ):
                listener.exitExcept_decl(self)




    def except_decl(self):

        localctx = IDLParser.Except_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_except_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(IDLParser.KW_EXCEPTION)
            self.state = 824
            self.simple_declarator()
            self.state = 825
            self.match(IDLParser.LEFT_BRACE)
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.AT) | (1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_SEQUENCE) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_FIXED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 826
                self.member()
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 832
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def op_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Op_type_specContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def parameter_decls(self):
            return self.getTypedRuleContext(IDLParser.Parameter_declsContext,0)


        def op_attribute(self):
            return self.getTypedRuleContext(IDLParser.Op_attributeContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def context_expr(self):
            return self.getTypedRuleContext(IDLParser.Context_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_op_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_decl" ):
                listener.enterOp_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_decl" ):
                listener.exitOp_decl(self)




    def op_decl(self):

        localctx = IDLParser.Op_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_op_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_ONEWAY:
                self.state = 834
                self.op_attribute()


            self.state = 837
            self.op_type_spec()
            self.state = 838
            self.simple_declarator()
            self.state = 839
            self.parameter_decls()
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_RAISES:
                self.state = 840
                self.raises_expr()


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_CONTEXT:
                self.state = 843
                self.context_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ONEWAY(self):
            return self.getToken(IDLParser.KW_ONEWAY, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_op_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_attribute" ):
                listener.enterOp_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_attribute" ):
                listener.exitOp_attribute(self)




    def op_attribute(self):

        localctx = IDLParser.Op_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_op_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(IDLParser.KW_ONEWAY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Op_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def KW_VOID(self):
            return self.getToken(IDLParser.KW_VOID, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_op_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp_type_spec" ):
                listener.enterOp_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp_type_spec" ):
                listener.exitOp_type_spec(self)




    def op_type_spec(self):

        localctx = IDLParser.Op_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_op_type_spec)
        try:
            self.state = 850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.KW_STRING, IDLParser.KW_OCTET, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_WSTRING, IDLParser.KW_UNSIGNED, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE, IDLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.param_type_spec()
                pass
            elif token in [IDLParser.KW_VOID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self.match(IDLParser.KW_VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_declsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def param_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Param_declContext)
            else:
                return self.getTypedRuleContext(IDLParser.Param_declContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_parameter_decls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_decls" ):
                listener.enterParameter_decls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_decls" ):
                listener.exitParameter_decls(self)




    def parameter_decls(self):

        localctx = IDLParser.Parameter_declsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_parameter_decls)
        self._la = 0 # Token type
        try:
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(IDLParser.LEFT_BRACKET)
                self.state = 853
                self.param_decl()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==IDLParser.COMA:
                    self.state = 854
                    self.match(IDLParser.COMA)
                    self.state = 855
                    self.param_decl()
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 861
                self.match(IDLParser.RIGHT_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self.match(IDLParser.LEFT_BRACKET)
                self.state = 864
                self.match(IDLParser.RIGHT_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_attribute(self):
            return self.getTypedRuleContext(IDLParser.Param_attributeContext,0)


        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_param_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_decl" ):
                listener.enterParam_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_decl" ):
                listener.exitParam_decl(self)




    def param_decl(self):

        localctx = IDLParser.Param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_param_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.param_attribute()
            self.state = 868
            self.param_type_spec()
            self.state = 869
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IN(self):
            return self.getToken(IDLParser.KW_IN, 0)

        def KW_OUT(self):
            return self.getToken(IDLParser.KW_OUT, 0)

        def KW_INOUT(self):
            return self.getToken(IDLParser.KW_INOUT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_param_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_attribute" ):
                listener.enterParam_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_attribute" ):
                listener.exitParam_attribute(self)




    def param_attribute(self):

        localctx = IDLParser.Param_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_param_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            _la = self._input.LA(1)
            if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (IDLParser.KW_OUT - 37)) | (1 << (IDLParser.KW_IN - 37)) | (1 << (IDLParser.KW_INOUT - 37)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raises_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_RAISES(self):
            return self.getToken(IDLParser.KW_RAISES, 0)

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def scoped_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Scoped_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Scoped_nameContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_raises_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaises_expr" ):
                listener.enterRaises_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaises_expr" ):
                listener.exitRaises_expr(self)




    def raises_expr(self):

        localctx = IDLParser.Raises_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_raises_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(IDLParser.KW_RAISES)
            self.state = 874
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 875
            self.scoped_name()
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 876
                self.match(IDLParser.COMA)
                self.state = 877
                self.scoped_name()
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 883
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Context_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONTEXT(self):
            return self.getToken(IDLParser.KW_CONTEXT, 0)

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.STRING_LITERAL)
            else:
                return self.getToken(IDLParser.STRING_LITERAL, i)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_context_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContext_expr" ):
                listener.enterContext_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContext_expr" ):
                listener.exitContext_expr(self)




    def context_expr(self):

        localctx = IDLParser.Context_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_context_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(IDLParser.KW_CONTEXT)
            self.state = 886
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 887
            self.match(IDLParser.STRING_LITERAL)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 888
                self.match(IDLParser.COMA)
                self.state = 889
                self.match(IDLParser.STRING_LITERAL)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 895
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_type_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Primitive_type_specContext,0)


        def string_type(self):
            return self.getTypedRuleContext(IDLParser.String_typeContext,0)


        def wide_string_type(self):
            return self.getTypedRuleContext(IDLParser.Wide_string_typeContext,0)


        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_param_type_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_type_spec" ):
                listener.enterParam_type_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_type_spec" ):
                listener.exitParam_type_spec(self)




    def param_type_spec(self):

        localctx = IDLParser.Param_type_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_param_type_spec)
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_OCTET, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_UNSIGNED, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.primitive_type_spec()
                pass
            elif token in [IDLParser.KW_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.string_type()
                pass
            elif token in [IDLParser.KW_WSTRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 899
                self.wide_string_type()
                pass
            elif token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 900
                self.scoped_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIXED(self):
            return self.getToken(IDLParser.KW_FIXED, 0)

        def LEFT_ANG_BRACKET(self):
            return self.getToken(IDLParser.LEFT_ANG_BRACKET, 0)

        def positive_int_const(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Positive_int_constContext)
            else:
                return self.getTypedRuleContext(IDLParser.Positive_int_constContext,i)


        def COMA(self):
            return self.getToken(IDLParser.COMA, 0)

        def RIGHT_ANG_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_ANG_BRACKET, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_fixed_pt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pt_type" ):
                listener.enterFixed_pt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pt_type" ):
                listener.exitFixed_pt_type(self)




    def fixed_pt_type(self):

        localctx = IDLParser.Fixed_pt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_fixed_pt_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(IDLParser.KW_FIXED)
            self.state = 904
            self.match(IDLParser.LEFT_ANG_BRACKET)
            self.state = 905
            self.positive_int_const()
            self.state = 906
            self.match(IDLParser.COMA)
            self.state = 907
            self.positive_int_const()
            self.state = 908
            self.match(IDLParser.RIGHT_ANG_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fixed_pt_const_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FIXED(self):
            return self.getToken(IDLParser.KW_FIXED, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_fixed_pt_const_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFixed_pt_const_type" ):
                listener.enterFixed_pt_const_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFixed_pt_const_type" ):
                listener.exitFixed_pt_const_type(self)




    def fixed_pt_const_type(self):

        localctx = IDLParser.Fixed_pt_const_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_fixed_pt_const_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(IDLParser.KW_FIXED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_base_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_VALUEBASE(self):
            return self.getToken(IDLParser.KW_VALUEBASE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_value_base_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_base_type" ):
                listener.enterValue_base_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_base_type" ):
                listener.exitValue_base_type(self)




    def value_base_type(self):

        localctx = IDLParser.Value_base_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_value_base_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(IDLParser.KW_VALUEBASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constr_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_STRUCT(self):
            return self.getToken(IDLParser.KW_STRUCT, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_UNION(self):
            return self.getToken(IDLParser.KW_UNION, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_constr_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstr_forward_decl" ):
                listener.enterConstr_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstr_forward_decl" ):
                listener.exitConstr_forward_decl(self)




    def constr_forward_decl(self):

        localctx = IDLParser.Constr_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_constr_forward_decl)
        try:
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_STRUCT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self.match(IDLParser.KW_STRUCT)
                self.state = 915
                self.simple_declarator()
                pass
            elif token in [IDLParser.KW_UNION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.match(IDLParser.KW_UNION)
                self.state = 917
                self.simple_declarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_IMPORT(self):
            return self.getToken(IDLParser.KW_IMPORT, 0)

        def imported_scope(self):
            return self.getTypedRuleContext(IDLParser.Imported_scopeContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_import_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_decl" ):
                listener.enterImport_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_decl" ):
                listener.exitImport_decl(self)




    def import_decl(self):

        localctx = IDLParser.Import_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_import_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(IDLParser.KW_IMPORT)
            self.state = 921
            self.imported_scope()
            self.state = 922
            self.match(IDLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imported_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_imported_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImported_scope" ):
                listener.enterImported_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImported_scope" ):
                listener.exitImported_scope(self)




    def imported_scope(self):

        localctx = IDLParser.Imported_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_imported_scope)
        try:
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 924
                self.scoped_name()
                pass
            elif token in [IDLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 925
                self.match(IDLParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_id_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPEID(self):
            return self.getToken(IDLParser.KW_TYPEID, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_type_id_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_id_decl" ):
                listener.enterType_id_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_id_decl" ):
                listener.exitType_id_decl(self)




    def type_id_decl(self):

        localctx = IDLParser.Type_id_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_type_id_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(IDLParser.KW_TYPEID)
            self.state = 929
            self.scoped_name()
            self.state = 930
            self.match(IDLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_prefix_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_TYPEPREFIX(self):
            return self.getToken(IDLParser.KW_TYPEPREFIX, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(IDLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_type_prefix_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_prefix_decl" ):
                listener.enterType_prefix_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_prefix_decl" ):
                listener.exitType_prefix_decl(self)




    def type_prefix_decl(self):

        localctx = IDLParser.Type_prefix_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_type_prefix_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(IDLParser.KW_TYPEPREFIX)
            self.state = 933
            self.scoped_name()
            self.state = 934
            self.match(IDLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Readonly_attr_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_READONLY(self):
            return self.getToken(IDLParser.KW_READONLY, 0)

        def KW_ATTRIBUTE(self):
            return self.getToken(IDLParser.KW_ATTRIBUTE, 0)

        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def readonly_attr_declarator(self):
            return self.getTypedRuleContext(IDLParser.Readonly_attr_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_readonly_attr_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadonly_attr_spec" ):
                listener.enterReadonly_attr_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadonly_attr_spec" ):
                listener.exitReadonly_attr_spec(self)




    def readonly_attr_spec(self):

        localctx = IDLParser.Readonly_attr_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_readonly_attr_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(IDLParser.KW_READONLY)
            self.state = 937
            self.match(IDLParser.KW_ATTRIBUTE)
            self.state = 938
            self.param_type_spec()
            self.state = 939
            self.readonly_attr_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Readonly_attr_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,i)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_readonly_attr_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadonly_attr_declarator" ):
                listener.enterReadonly_attr_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadonly_attr_declarator" ):
                listener.exitReadonly_attr_declarator(self)




    def readonly_attr_declarator(self):

        localctx = IDLParser.Readonly_attr_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_readonly_attr_declarator)
        self._la = 0 # Token type
        try:
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.simple_declarator()
                self.state = 942
                self.raises_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.simple_declarator()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==IDLParser.COMA:
                    self.state = 945
                    self.match(IDLParser.COMA)
                    self.state = 946
                    self.simple_declarator()
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ATTRIBUTE(self):
            return self.getToken(IDLParser.KW_ATTRIBUTE, 0)

        def param_type_spec(self):
            return self.getTypedRuleContext(IDLParser.Param_type_specContext,0)


        def attr_declarator(self):
            return self.getTypedRuleContext(IDLParser.Attr_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_attr_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_spec" ):
                listener.enterAttr_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_spec" ):
                listener.exitAttr_spec(self)




    def attr_spec(self):

        localctx = IDLParser.Attr_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_attr_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(IDLParser.KW_ATTRIBUTE)
            self.state = 955
            self.param_type_spec()
            self.state = 956
            self.attr_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_declaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_declarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Simple_declaratorContext)
            else:
                return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,i)


        def attr_raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Attr_raises_exprContext,0)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_attr_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_declarator" ):
                listener.enterAttr_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_declarator" ):
                listener.exitAttr_declarator(self)




    def attr_declarator(self):

        localctx = IDLParser.Attr_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_attr_declarator)
        self._la = 0 # Token type
        try:
            self.state = 969
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 958
                self.simple_declarator()
                self.state = 959
                self.attr_raises_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.simple_declarator()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==IDLParser.COMA:
                    self.state = 962
                    self.match(IDLParser.COMA)
                    self.state = 963
                    self.simple_declarator()
                    self.state = 968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attr_raises_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def get_excep_expr(self):
            return self.getTypedRuleContext(IDLParser.Get_excep_exprContext,0)


        def set_excep_expr(self):
            return self.getTypedRuleContext(IDLParser.Set_excep_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_attr_raises_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr_raises_expr" ):
                listener.enterAttr_raises_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr_raises_expr" ):
                listener.exitAttr_raises_expr(self)




    def attr_raises_expr(self):

        localctx = IDLParser.Attr_raises_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_attr_raises_expr)
        self._la = 0 # Token type
        try:
            self.state = 976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_GETRAISES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.get_excep_expr()
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==IDLParser.KW_SETRAISES:
                    self.state = 972
                    self.set_excep_expr()


                pass
            elif token in [IDLParser.KW_SETRAISES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.set_excep_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_excep_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_GETRAISES(self):
            return self.getToken(IDLParser.KW_GETRAISES, 0)

        def exception_list(self):
            return self.getTypedRuleContext(IDLParser.Exception_listContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_get_excep_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_excep_expr" ):
                listener.enterGet_excep_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_excep_expr" ):
                listener.exitGet_excep_expr(self)




    def get_excep_expr(self):

        localctx = IDLParser.Get_excep_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_get_excep_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(IDLParser.KW_GETRAISES)
            self.state = 979
            self.exception_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_excep_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SETRAISES(self):
            return self.getToken(IDLParser.KW_SETRAISES, 0)

        def exception_list(self):
            return self.getTypedRuleContext(IDLParser.Exception_listContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_set_excep_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_excep_expr" ):
                listener.enterSet_excep_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_excep_expr" ):
                listener.exitSet_excep_expr(self)




    def set_excep_expr(self):

        localctx = IDLParser.Set_excep_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_set_excep_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(IDLParser.KW_SETRAISES)
            self.state = 982
            self.exception_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exception_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def scoped_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Scoped_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Scoped_nameContext,i)


        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_exception_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterException_list" ):
                listener.enterException_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitException_list" ):
                listener.exitException_list(self)




    def exception_list(self):

        localctx = IDLParser.Exception_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_exception_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 985
            self.scoped_name()
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 986
                self.match(IDLParser.COMA)
                self.state = 987
                self.scoped_name()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 993
            self.match(IDLParser.RIGHT_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_decl(self):
            return self.getTypedRuleContext(IDLParser.Component_declContext,0)


        def component_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Component_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent" ):
                listener.enterComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent" ):
                listener.exitComponent(self)




    def component(self):

        localctx = IDLParser.ComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_component)
        try:
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.component_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.component_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMPONENT(self):
            return self.getToken(IDLParser.KW_COMPONENT, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_forward_decl" ):
                listener.enterComponent_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_forward_decl" ):
                listener.exitComponent_forward_decl(self)




    def component_forward_decl(self):

        localctx = IDLParser.Component_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_component_forward_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(IDLParser.KW_COMPONENT)
            self.state = 1000
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_header(self):
            return self.getTypedRuleContext(IDLParser.Component_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def component_body(self):
            return self.getTypedRuleContext(IDLParser.Component_bodyContext,0)


        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_component_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_decl" ):
                listener.enterComponent_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_decl" ):
                listener.exitComponent_decl(self)




    def component_decl(self):

        localctx = IDLParser.Component_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_component_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.component_header()
            self.state = 1003
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1004
            self.component_body()
            self.state = 1005
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_COMPONENT(self):
            return self.getToken(IDLParser.KW_COMPONENT, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def component_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Component_inheritance_specContext,0)


        def supported_interface_spec(self):
            return self.getTypedRuleContext(IDLParser.Supported_interface_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_header" ):
                listener.enterComponent_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_header" ):
                listener.exitComponent_header(self)




    def component_header(self):

        localctx = IDLParser.Component_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_component_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(IDLParser.KW_COMPONENT)
            self.state = 1008
            self.simple_declarator()
            self.state = 1010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.COLON:
                self.state = 1009
                self.component_inheritance_spec()


            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_SUPPORTS:
                self.state = 1012
                self.supported_interface_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supported_interface_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_SUPPORTS(self):
            return self.getToken(IDLParser.KW_SUPPORTS, 0)

        def scoped_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Scoped_nameContext)
            else:
                return self.getTypedRuleContext(IDLParser.Scoped_nameContext,i)


        def COMA(self, i:int=None):
            if i is None:
                return self.getTokens(IDLParser.COMA)
            else:
                return self.getToken(IDLParser.COMA, i)

        def getRuleIndex(self):
            return IDLParser.RULE_supported_interface_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupported_interface_spec" ):
                listener.enterSupported_interface_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupported_interface_spec" ):
                listener.exitSupported_interface_spec(self)




    def supported_interface_spec(self):

        localctx = IDLParser.Supported_interface_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_supported_interface_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(IDLParser.KW_SUPPORTS)
            self.state = 1016
            self.scoped_name()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==IDLParser.COMA:
                self.state = 1017
                self.match(IDLParser.COMA)
                self.state = 1018
                self.scoped_name()
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_inheritance_spec" ):
                listener.enterComponent_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_inheritance_spec" ):
                listener.exitComponent_inheritance_spec(self)




    def component_inheritance_spec(self):

        localctx = IDLParser.Component_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_component_inheritance_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(IDLParser.COLON)
            self.state = 1025
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def component_export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Component_exportContext)
            else:
                return self.getTypedRuleContext(IDLParser.Component_exportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_component_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_body" ):
                listener.enterComponent_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_body" ):
                listener.exitComponent_body(self)




    def component_body(self):

        localctx = IDLParser.Component_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_component_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.KW_EMITS) | (1 << IDLParser.KW_PUBLISHES) | (1 << IDLParser.KW_USES) | (1 << IDLParser.KW_READONLY))) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (IDLParser.KW_PROVIDES - 97)) | (1 << (IDLParser.KW_CONSUMES - 97)) | (1 << (IDLParser.KW_ATTRIBUTE - 97)))) != 0):
                self.state = 1027
                self.component_export()
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Component_exportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def provides_decl(self):
            return self.getTypedRuleContext(IDLParser.Provides_declContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def uses_decl(self):
            return self.getTypedRuleContext(IDLParser.Uses_declContext,0)


        def emits_decl(self):
            return self.getTypedRuleContext(IDLParser.Emits_declContext,0)


        def publishes_decl(self):
            return self.getTypedRuleContext(IDLParser.Publishes_declContext,0)


        def consumes_decl(self):
            return self.getTypedRuleContext(IDLParser.Consumes_declContext,0)


        def attr_decl(self):
            return self.getTypedRuleContext(IDLParser.Attr_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_component_export

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComponent_export" ):
                listener.enterComponent_export(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComponent_export" ):
                listener.exitComponent_export(self)




    def component_export(self):

        localctx = IDLParser.Component_exportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_component_export)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.KW_PROVIDES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1033
                self.provides_decl()
                self.state = 1034
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [IDLParser.KW_USES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.uses_decl()
                self.state = 1037
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [IDLParser.KW_EMITS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.emits_decl()
                self.state = 1040
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [IDLParser.KW_PUBLISHES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1042
                self.publishes_decl()
                self.state = 1043
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [IDLParser.KW_CONSUMES]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1045
                self.consumes_decl()
                self.state = 1046
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [IDLParser.KW_READONLY, IDLParser.KW_ATTRIBUTE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1048
                self.attr_decl()
                self.state = 1049
                self.match(IDLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provides_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PROVIDES(self):
            return self.getToken(IDLParser.KW_PROVIDES, 0)

        def interface_type(self):
            return self.getTypedRuleContext(IDLParser.Interface_typeContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_provides_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvides_decl" ):
                listener.enterProvides_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvides_decl" ):
                listener.exitProvides_decl(self)




    def provides_decl(self):

        localctx = IDLParser.Provides_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_provides_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(IDLParser.KW_PROVIDES)
            self.state = 1054
            self.interface_type()
            self.state = 1055
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def KW_OBJECT(self):
            return self.getToken(IDLParser.KW_OBJECT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_interface_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_type" ):
                listener.enterInterface_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_type" ):
                listener.exitInterface_type(self)




    def interface_type(self):

        localctx = IDLParser.Interface_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_interface_type)
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.scoped_name()
                pass
            elif token in [IDLParser.KW_OBJECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.match(IDLParser.KW_OBJECT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_USES(self):
            return self.getToken(IDLParser.KW_USES, 0)

        def interface_type(self):
            return self.getTypedRuleContext(IDLParser.Interface_typeContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_MULTIPLE(self):
            return self.getToken(IDLParser.KW_MULTIPLE, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_uses_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_decl" ):
                listener.enterUses_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_decl" ):
                listener.exitUses_decl(self)




    def uses_decl(self):

        localctx = IDLParser.Uses_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_uses_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(IDLParser.KW_USES)
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_MULTIPLE:
                self.state = 1062
                self.match(IDLParser.KW_MULTIPLE)


            self.state = 1065
            self.interface_type()
            self.state = 1066
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Emits_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EMITS(self):
            return self.getToken(IDLParser.KW_EMITS, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_emits_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmits_decl" ):
                listener.enterEmits_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmits_decl" ):
                listener.exitEmits_decl(self)




    def emits_decl(self):

        localctx = IDLParser.Emits_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_emits_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(IDLParser.KW_EMITS)
            self.state = 1069
            self.scoped_name()
            self.state = 1070
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Publishes_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PUBLISHES(self):
            return self.getToken(IDLParser.KW_PUBLISHES, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_publishes_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishes_decl" ):
                listener.enterPublishes_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishes_decl" ):
                listener.exitPublishes_decl(self)




    def publishes_decl(self):

        localctx = IDLParser.Publishes_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_publishes_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(IDLParser.KW_PUBLISHES)
            self.state = 1073
            self.scoped_name()
            self.state = 1074
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Consumes_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_CONSUMES(self):
            return self.getToken(IDLParser.KW_CONSUMES, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_consumes_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConsumes_decl" ):
                listener.enterConsumes_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConsumes_decl" ):
                listener.exitConsumes_decl(self)




    def consumes_decl(self):

        localctx = IDLParser.Consumes_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_consumes_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(IDLParser.KW_CONSUMES)
            self.state = 1077
            self.scoped_name()
            self.state = 1078
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def home_header(self):
            return self.getTypedRuleContext(IDLParser.Home_headerContext,0)


        def home_body(self):
            return self.getTypedRuleContext(IDLParser.Home_bodyContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_decl" ):
                listener.enterHome_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_decl" ):
                listener.exitHome_decl(self)




    def home_decl(self):

        localctx = IDLParser.Home_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_home_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.home_header()
            self.state = 1081
            self.home_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_HOME(self):
            return self.getToken(IDLParser.KW_HOME, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_MANAGES(self):
            return self.getToken(IDLParser.KW_MANAGES, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def home_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Home_inheritance_specContext,0)


        def supported_interface_spec(self):
            return self.getTypedRuleContext(IDLParser.Supported_interface_specContext,0)


        def primary_key_spec(self):
            return self.getTypedRuleContext(IDLParser.Primary_key_specContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_header" ):
                listener.enterHome_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_header" ):
                listener.exitHome_header(self)




    def home_header(self):

        localctx = IDLParser.Home_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_home_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(IDLParser.KW_HOME)
            self.state = 1084
            self.simple_declarator()
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.COLON:
                self.state = 1085
                self.home_inheritance_spec()


            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_SUPPORTS:
                self.state = 1088
                self.supported_interface_spec()


            self.state = 1091
            self.match(IDLParser.KW_MANAGES)
            self.state = 1092
            self.scoped_name()
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_PRIMARYKEY:
                self.state = 1093
                self.primary_key_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_inheritance_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(IDLParser.COLON, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_inheritance_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_inheritance_spec" ):
                listener.enterHome_inheritance_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_inheritance_spec" ):
                listener.exitHome_inheritance_spec(self)




    def home_inheritance_spec(self):

        localctx = IDLParser.Home_inheritance_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_home_inheritance_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(IDLParser.COLON)
            self.state = 1097
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_key_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_PRIMARYKEY(self):
            return self.getToken(IDLParser.KW_PRIMARYKEY, 0)

        def scoped_name(self):
            return self.getTypedRuleContext(IDLParser.Scoped_nameContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_primary_key_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_key_spec" ):
                listener.enterPrimary_key_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_key_spec" ):
                listener.exitPrimary_key_spec(self)




    def primary_key_spec(self):

        localctx = IDLParser.Primary_key_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_primary_key_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(IDLParser.KW_PRIMARYKEY)
            self.state = 1100
            self.scoped_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def home_export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Home_exportContext)
            else:
                return self.getTypedRuleContext(IDLParser.Home_exportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_home_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_body" ):
                listener.enterHome_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_body" ):
                listener.exitHome_body(self)




    def home_body(self):

        localctx = IDLParser.Home_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_home_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_READONLY) | (1 << IDLParser.KW_FINDER) | (1 << IDLParser.KW_VOID) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_FACTORY - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 1103
                self.home_export()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1109
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Home_exportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export(self):
            return self.getTypedRuleContext(IDLParser.ExportContext,0)


        def factory_decl(self):
            return self.getTypedRuleContext(IDLParser.Factory_declContext,0)


        def SEMICOLON(self):
            return self.getToken(IDLParser.SEMICOLON, 0)

        def finder_decl(self):
            return self.getTypedRuleContext(IDLParser.Finder_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_home_export

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHome_export" ):
                listener.enterHome_export(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHome_export" ):
                listener.exitHome_export(self)




    def home_export(self):

        localctx = IDLParser.Home_exportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_home_export)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [IDLParser.DOUBLE_COLON, IDLParser.KW_STRING, IDLParser.KW_TYPEDEF, IDLParser.KW_OCTET, IDLParser.KW_STRUCT, IDLParser.KW_READONLY, IDLParser.KW_VOID, IDLParser.KW_WCHAR, IDLParser.KW_SHORT, IDLParser.KW_LONG, IDLParser.KW_ENUM, IDLParser.KW_WSTRING, IDLParser.KW_EXCEPTION, IDLParser.KW_CONST, IDLParser.KW_UNSIGNED, IDLParser.KW_UNION, IDLParser.KW_ONEWAY, IDLParser.KW_CHAR, IDLParser.KW_INT8, IDLParser.KW_INT16, IDLParser.KW_INT32, IDLParser.KW_INT64, IDLParser.KW_UINT8, IDLParser.KW_UINT16, IDLParser.KW_UINT32, IDLParser.KW_UINT64, IDLParser.KW_FLOAT, IDLParser.KW_BOOLEAN, IDLParser.KW_DOUBLE, IDLParser.KW_TYPEPREFIX, IDLParser.KW_TYPEID, IDLParser.KW_ATTRIBUTE, IDLParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.export()
                pass
            elif token in [IDLParser.KW_FACTORY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.factory_decl()
                self.state = 1113
                self.match(IDLParser.SEMICOLON)
                pass
            elif token in [IDLParser.KW_FINDER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1115
                self.finder_decl()
                self.state = 1116
                self.match(IDLParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factory_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FACTORY(self):
            return self.getToken(IDLParser.KW_FACTORY, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def init_param_decls(self):
            return self.getTypedRuleContext(IDLParser.Init_param_declsContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_factory_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactory_decl" ):
                listener.enterFactory_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactory_decl" ):
                listener.exitFactory_decl(self)




    def factory_decl(self):

        localctx = IDLParser.Factory_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_factory_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(IDLParser.KW_FACTORY)
            self.state = 1121
            self.simple_declarator()
            self.state = 1122
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_IN:
                self.state = 1123
                self.init_param_decls()


            self.state = 1126
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_RAISES:
                self.state = 1127
                self.raises_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finder_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_FINDER(self):
            return self.getToken(IDLParser.KW_FINDER, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def LEFT_BRACKET(self):
            return self.getToken(IDLParser.LEFT_BRACKET, 0)

        def RIGHT_BRACKET(self):
            return self.getToken(IDLParser.RIGHT_BRACKET, 0)

        def init_param_decls(self):
            return self.getTypedRuleContext(IDLParser.Init_param_declsContext,0)


        def raises_expr(self):
            return self.getTypedRuleContext(IDLParser.Raises_exprContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_finder_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinder_decl" ):
                listener.enterFinder_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinder_decl" ):
                listener.exitFinder_decl(self)




    def finder_decl(self):

        localctx = IDLParser.Finder_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_finder_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(IDLParser.KW_FINDER)
            self.state = 1131
            self.simple_declarator()
            self.state = 1132
            self.match(IDLParser.LEFT_BRACKET)
            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_IN:
                self.state = 1133
                self.init_param_decls()


            self.state = 1136
            self.match(IDLParser.RIGHT_BRACKET)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_RAISES:
                self.state = 1137
                self.raises_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_decl(self):
            return self.getTypedRuleContext(IDLParser.Event_declContext,0)


        def event_abs_decl(self):
            return self.getTypedRuleContext(IDLParser.Event_abs_declContext,0)


        def event_forward_decl(self):
            return self.getTypedRuleContext(IDLParser.Event_forward_declContext,0)


        def getRuleIndex(self):
            return IDLParser.RULE_event

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent" ):
                listener.enterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent" ):
                listener.exitEvent(self)




    def event(self):

        localctx = IDLParser.EventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_event)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1140
                self.event_decl()
                pass

            elif la_ == 2:
                self.state = 1141
                self.event_abs_decl()
                pass

            elif la_ == 3:
                self.state = 1142
                self.event_forward_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_forward_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EVENTTYPE(self):
            return self.getToken(IDLParser.KW_EVENTTYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_event_forward_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_forward_decl" ):
                listener.enterEvent_forward_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_forward_decl" ):
                listener.exitEvent_forward_decl(self)




    def event_forward_decl(self):

        localctx = IDLParser.Event_forward_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_event_forward_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_ABSTRACT:
                self.state = 1145
                self.match(IDLParser.KW_ABSTRACT)


            self.state = 1148
            self.match(IDLParser.KW_EVENTTYPE)
            self.state = 1149
            self.simple_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_abs_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_ABSTRACT(self):
            return self.getToken(IDLParser.KW_ABSTRACT, 0)

        def KW_EVENTTYPE(self):
            return self.getToken(IDLParser.KW_EVENTTYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def export(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.ExportContext)
            else:
                return self.getTypedRuleContext(IDLParser.ExportContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_event_abs_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_abs_decl" ):
                listener.enterEvent_abs_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_abs_decl" ):
                listener.exitEvent_abs_decl(self)




    def event_abs_decl(self):

        localctx = IDLParser.Event_abs_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_event_abs_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(IDLParser.KW_ABSTRACT)
            self.state = 1152
            self.match(IDLParser.KW_EVENTTYPE)
            self.state = 1153
            self.simple_declarator()
            self.state = 1154
            self.value_inheritance_spec()
            self.state = 1155
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_READONLY) | (1 << IDLParser.KW_VOID) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 1156
                self.export()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1162
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_header(self):
            return self.getTypedRuleContext(IDLParser.Event_headerContext,0)


        def LEFT_BRACE(self):
            return self.getToken(IDLParser.LEFT_BRACE, 0)

        def RIGHT_BRACE(self):
            return self.getToken(IDLParser.RIGHT_BRACE, 0)

        def value_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(IDLParser.Value_elementContext)
            else:
                return self.getTypedRuleContext(IDLParser.Value_elementContext,i)


        def getRuleIndex(self):
            return IDLParser.RULE_event_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_decl" ):
                listener.enterEvent_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_decl" ):
                listener.exitEvent_decl(self)




    def event_decl(self):

        localctx = IDLParser.Event_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_event_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.event_header()
            self.state = 1165
            self.match(IDLParser.LEFT_BRACE)
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << IDLParser.DOUBLE_COLON) | (1 << IDLParser.KW_STRING) | (1 << IDLParser.KW_TYPEDEF) | (1 << IDLParser.KW_OCTET) | (1 << IDLParser.KW_STRUCT) | (1 << IDLParser.KW_READONLY) | (1 << IDLParser.KW_VOID) | (1 << IDLParser.KW_PRIVATE) | (1 << IDLParser.KW_WCHAR) | (1 << IDLParser.KW_PUBLIC) | (1 << IDLParser.KW_SHORT) | (1 << IDLParser.KW_LONG) | (1 << IDLParser.KW_ENUM))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (IDLParser.KW_WSTRING - 64)) | (1 << (IDLParser.KW_FACTORY - 64)) | (1 << (IDLParser.KW_EXCEPTION - 64)) | (1 << (IDLParser.KW_CONST - 64)) | (1 << (IDLParser.KW_UNSIGNED - 64)) | (1 << (IDLParser.KW_UNION - 64)) | (1 << (IDLParser.KW_ONEWAY - 64)) | (1 << (IDLParser.KW_CHAR - 64)) | (1 << (IDLParser.KW_INT8 - 64)) | (1 << (IDLParser.KW_INT16 - 64)) | (1 << (IDLParser.KW_INT32 - 64)) | (1 << (IDLParser.KW_INT64 - 64)) | (1 << (IDLParser.KW_UINT8 - 64)) | (1 << (IDLParser.KW_UINT16 - 64)) | (1 << (IDLParser.KW_UINT32 - 64)) | (1 << (IDLParser.KW_UINT64 - 64)) | (1 << (IDLParser.KW_FLOAT - 64)) | (1 << (IDLParser.KW_BOOLEAN - 64)) | (1 << (IDLParser.KW_DOUBLE - 64)) | (1 << (IDLParser.KW_TYPEPREFIX - 64)) | (1 << (IDLParser.KW_TYPEID - 64)) | (1 << (IDLParser.KW_ATTRIBUTE - 64)) | (1 << (IDLParser.ID - 64)))) != 0):
                self.state = 1166
                self.value_element()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1172
            self.match(IDLParser.RIGHT_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Event_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KW_EVENTTYPE(self):
            return self.getToken(IDLParser.KW_EVENTTYPE, 0)

        def simple_declarator(self):
            return self.getTypedRuleContext(IDLParser.Simple_declaratorContext,0)


        def value_inheritance_spec(self):
            return self.getTypedRuleContext(IDLParser.Value_inheritance_specContext,0)


        def KW_CUSTOM(self):
            return self.getToken(IDLParser.KW_CUSTOM, 0)

        def getRuleIndex(self):
            return IDLParser.RULE_event_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_header" ):
                listener.enterEvent_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_header" ):
                listener.exitEvent_header(self)




    def event_header(self):

        localctx = IDLParser.Event_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_event_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==IDLParser.KW_CUSTOM:
                self.state = 1174
                self.match(IDLParser.KW_CUSTOM)


            self.state = 1177
            self.match(IDLParser.KW_EVENTTYPE)
            self.state = 1178
            self.simple_declarator()
            self.state = 1179
            self.value_inheritance_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





